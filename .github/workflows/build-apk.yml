name: 🎮 Build Android APK

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:  # Позволяет запускать вручную

jobs:
  build:
    name: 🔨 Build APK
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: 💾 Cache Android SDK
      uses: actions/cache@v3
      with:
        path: $HOME/android-sdk
        key: ${{ runner.os }}-android-sdk-${{ hashFiles('app/build.gradle') }}
        restore-keys: |
          ${{ runner.os }}-android-sdk-
        
    - name: � Set up Android SDK
      run: |
        if [ ! -d "$HOME/android-sdk/cmdline-tools/latest" ]; then
          echo "Installing Android SDK..."
          mkdir -p $HOME/android-sdk/cmdline-tools
          cd $HOME/android-sdk/cmdline-tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q commandlinetools-linux-11076708_latest.zip
          mv cmdline-tools latest
        else
          echo "Android SDK found in cache, skipping download"
        fi
        
    - name: 🌍 Set Android SDK environment variables
      run: |
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools" >> $GITHUB_PATH
        
    - name: 🔧 Install Android SDK components
      run: |
        yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses || true
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-34"
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --install "build-tools;34.0.0"
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --install "platform-tools"
        
    - name: 🎯 Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 📦 Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🔍 Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1
      
    - name: 🏗️ Build Debug APK
      run: ./gradlew assembleDebug --stacktrace
      
    - name: 📊 Run tests
      run: ./gradlew test --stacktrace
      continue-on-error: true  # Не останавливаем сборку если тесты падают
      
    - name: 📋 Get APK info
      id: apk_info
      run: |
        APK_PATH=$(find app/build/outputs/apk/debug -name "*.apk" | head -1)
        APK_SIZE=$(ls -lh $APK_PATH | awk '{print $5}')
        APK_NAME=$(basename $APK_PATH)
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
        echo "apk_size=$APK_SIZE" >> $GITHUB_OUTPUT
        echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT
        echo "📱 APK built: $APK_NAME ($APK_SIZE)"
        
    - name: 📤 Upload APK as artifact
      uses: actions/upload-artifact@v4
      with:
        name: FinancialSuccess-Debug-APK
        path: ${{ steps.apk_info.outputs.apk_path }}
        retention-days: 30
        
    - name: 💬 Comment APK info (on PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const apkSize = '${{ steps.apk_info.outputs.apk_size }}';
          const runId = '${{ github.run_id }}';
          const body = `🎮 **APK собран успешно!**
          
          📱 **Размер APK:** ${apkSize}
          📦 **Скачать:** [FinancialSuccess-Debug-APK](https://github.com/${{ github.repository }}/actions/runs/${runId})
          
          ✅ Готов к тестированию!`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
          
  build-info:
    name: 📊 Build Summary  
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
    - name: 📈 Build Status
      run: |
        echo "🎯 Build completed!"
        echo "Status: ${{ needs.build.result }}"
        if [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ APK built successfully!"
        else
          echo "❌ Build failed!"
        fi