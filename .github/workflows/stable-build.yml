name: üöÄ Stable Build & Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true
  MAESTRO_CLI_ANALYSIS_NOTIFICATION_DISABLED: "true"

jobs:
  setup-android-sdk:
    runs-on: ubuntu-latest
    outputs:
      sdk-path: /home/runner/android-sdk
      version: ${{ steps.version.outputs.version }}
      version_code: ${{ steps.version.outputs.version_code }}
      date: ${{ steps.date.outputs.date }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      - name: üìÖ Get current date
        id: date
        run: echo "date=$(date '+%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
      - name: üîñ Get version info
        id: version
        run: |
          echo "üîç ==== –ü–û–õ–£–ß–ï–ù–ò–ï –í–ï–†–°–ò–ò ===="
          echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ app/build.gradle..."
          ls -la app/build.gradle || echo "‚ùå app/build.gradle –Ω–µ –Ω–∞–π–¥–µ–Ω"
          
          echo "üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ app/build.gradle:"
          cat app/build.gradle | grep -E "(versionName|versionCode)" || echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã versionName –∏–ª–∏ versionCode"
          
          VERSION=$(grep -oP 'versionName\s+"\K[^"]+' app/build.gradle)
          VERSION_CODE=$(grep -oP 'versionCode\s+\K[0-9]+' app/build.gradle)
          
          echo "üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: $VERSION"
          echo "üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–¥ –≤–µ—Ä—Å–∏–∏: $VERSION_CODE"
          
          if [ -z "$VERSION" ]; then
            echo "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å versionName"
            exit 1
          fi
          if [ -z "$VERSION_CODE" ]; then
            echo "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å versionCode"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "‚úÖ –í–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞: $VERSION ($VERSION_CODE)"
      - name: üèóÔ∏è Prepare Android SDK directories
        id: set-sdk-path
        run: |
          echo "sdk_path=/home/runner/android-sdk" >> $GITHUB_OUTPUT
          mkdir -p /home/runner/android-sdk
          echo "ANDROID_SDK_ROOT=/home/runner/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=/home/runner/android-sdk" >> $GITHUB_ENV
      - name: üõ†Ô∏è Download and install Android commandline tools
        run: |
          echo "üîß ==== –£–°–¢–ê–ù–û–í–ö–ê ANDROID COMMANDLINE TOOLS ===="
          set -x
          
          echo "üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤..."
          sudo apt-get update
          
          echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ wget –∏ unzip..."
          sudo apt-get install -y wget unzip
          
          echo "üîß –ó–∞–≥—Ä—É–∑–∫–∞ commandline tools..."
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          echo "üîß –†–∞–∑–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:"
          ls -la cmdline-tools.zip
          
          echo "üîß –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ commandline tools..."
          unzip cmdline-tools.zip -d $HOME
          echo "üîß –°–æ–¥–µ—Ä–∂–∏–º–æ–µ $HOME –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏:"
          ls -la $HOME/ | grep cmdline
          
          echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
          mkdir -p $HOME/android-sdk/cmdline-tools
          mv $HOME/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
          
          echo "üîß ==== –°–¢–†–£–ö–¢–£–†–ê CMDLINE-TOOLS ===="
          find $HOME/android-sdk/cmdline-tools/ -type f | head -20
          echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ sdkmanager:"
          ls -la $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager || echo "‚ùå sdkmanager –Ω–µ –Ω–∞–π–¥–µ–Ω"
      - name: üõ†Ô∏è Install Android SDK components
        run: |
          echo "üîß ==== –£–°–¢–ê–ù–û–í–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ANDROID SDK ===="
          set -x
          
          echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
          export ANDROID_SDK_ROOT=/home/runner/android-sdk
          export ANDROID_HOME=/home/runner/android-sdk
          export PATH="$PATH:/home/runner/android-sdk/emulator:/home/runner/android-sdk/platform-tools:/home/runner/android-sdk/cmdline-tools/latest/bin"
          
          echo "üîß ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "üîß ANDROID_HOME: $ANDROID_HOME"
          echo "üîß PATH: $PATH"
          
          echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ sdkmanager –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π..."
          which sdkmanager || echo "‚ùå sdkmanager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH"
          ls -la $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager || echo "‚ùå sdkmanager –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏"
          
          echo "üîß –ü—Ä–∏–Ω—è—Ç–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–π..."
          yes | sdkmanager --licenses || { echo "‚ùå –û–®–ò–ë–ö–ê: sdkmanager license error"; exit 1; }
          
          echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ SDK..."
          echo "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º: platform-tools, emulator, system-images;android-34;default;x86_64"
          sdkmanager "platform-tools" "emulator" "system-images;android-34;default;x86_64" || { echo "‚ùå –û–®–ò–ë–ö–ê: sdkmanager install error"; exit 1; }
          
          echo "üîß ==== –ü–†–û–í–ï–†–ö–ê –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===="
          echo "üîß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ SDK –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:"
          find $ANDROID_SDK_ROOT/ -type d | head -20
          
          echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ platform-tools:"
          ls -la $ANDROID_SDK_ROOT/platform-tools/ || echo "‚ùå platform-tools –Ω–µ –Ω–∞–π–¥–µ–Ω"
          
          echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ emulator:"
          ls -la $ANDROID_SDK_ROOT/emulator/ || echo "‚ùå emulator –Ω–µ –Ω–∞–π–¥–µ–Ω"
          
          echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ system-images:"
          find $ANDROID_SDK_ROOT/system-images/ -type f | head -10 || echo "‚ùå system-images –Ω–µ –Ω–∞–π–¥–µ–Ω"
          
          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
          echo "üîß ==== –£–°–¢–ê–ù–û–í–ö–ê –ü–†–ê–í –ù–ê –í–´–ü–û–õ–ù–ï–ù–ò–ï ===="
          echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è SDK —Ñ–∞–π–ª–æ–≤..."
          chmod +x $ANDROID_SDK_ROOT/platform-tools/* || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è platform-tools"
          chmod +x $ANDROID_SDK_ROOT/emulator/* || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è emulator"
          chmod +x $ANDROID_SDK_ROOT/emulator/qemu/linux-x86_64/* || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è qemu"
          chmod +x $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/* || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è cmdline-tools"
          
          echo "üîß ==== –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ù–ê –í–´–ü–û–õ–ù–ï–ù–ò–ï ===="
          echo "üîß –ü—Ä–∞–≤–∞ –Ω–∞ adb:"
          ls -la $ANDROID_SDK_ROOT/platform-tools/adb || echo "‚ùå adb –Ω–µ –Ω–∞–π–¥–µ–Ω"
          
          echo "üîß –ü—Ä–∞–≤–∞ –Ω–∞ emulator:"
          ls -la $ANDROID_SDK_ROOT/emulator/emulator || echo "‚ùå emulator –Ω–µ –Ω–∞–π–¥–µ–Ω"
          
          echo "üîß –ü—Ä–∞–≤–∞ –Ω–∞ avdmanager:"
          ls -la $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager || echo "‚ùå avdmanager –Ω–µ –Ω–∞–π–¥–µ–Ω"
          
          echo "üîß ==== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ===="
          echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ system-images –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:"
          find $ANDROID_SDK_ROOT/system-images/ || echo "‚ùå system-images dir not found"
          
          echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥:"
          $ANDROID_SDK_ROOT/platform-tools/adb version || echo "‚ùå adb version failed"
          $ANDROID_SDK_ROOT/emulator/emulator -version || echo "‚ùå emulator version failed"
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager list avd || echo "‚ùå avdmanager failed"
      - name: üì¶ Upload Android SDK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-sdk
          path: ${{ env.ANDROID_SDK_ROOT }}

  # –°–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ APK
  build-and-test:
    runs-on: ubuntu-latest
    needs: setup-android-sdk
    outputs:
      version: ${{ needs.setup-android-sdk.outputs.version }}
      version_code: ${{ needs.setup-android-sdk.outputs.version_code }}
      date: ${{ needs.setup-android-sdk.outputs.date }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üîß Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          
      - name: üì¶ Download Android SDK artifact
        uses: actions/download-artifact@v4
        with:
          name: android-sdk
          path: /home/runner/android-sdk
          
      - name: üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (Build)
        run: |
          echo "üîß ==== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–†–ê–í –ù–ê –í–´–ü–û–õ–ù–ï–ù–ò–ï (BUILD) ===="
          echo "üîß ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ SDK:"
          ls -la /home/runner/android-sdk/ || echo "‚ùå SDK –Ω–µ –Ω–∞–π–¥–µ–Ω"
          
          echo "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö SDK —Ñ–∞–π–ª–æ–≤..."
          chmod +x /home/runner/android-sdk/platform-tools/* || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è platform-tools"
          chmod +x /home/runner/android-sdk/emulator/* || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è emulator"
          chmod +x /home/runner/android-sdk/emulator/qemu/linux-x86_64/* || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è qemu"
          chmod +x /home/runner/android-sdk/cmdline-tools/latest/bin/* || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è cmdline-tools"
          
          echo "üîß ==== –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ü–û–°–õ–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø ===="
          echo "üîß –ü—Ä–∞–≤–∞ –Ω–∞ adb:"
          ls -la /home/runner/android-sdk/platform-tools/adb | grep -E "^-r.x" || echo "‚ùå adb –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
          
          echo "üîß –ü—Ä–∞–≤–∞ –Ω–∞ emulator:"
          ls -la /home/runner/android-sdk/emulator/emulator | grep -E "^-r.x" || echo "‚ùå emulator –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
          
          echo "üîß ==== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î ===="
          echo "üîß –¢–µ—Å—Ç adb:"
          /home/runner/android-sdk/platform-tools/adb version || echo "‚ùå adb version failed"
          
          echo "üîß –¢–µ—Å—Ç emulator:"
          /home/runner/android-sdk/emulator/emulator -version || echo "‚ùå emulator version failed"
          
      - name: üèóÔ∏è Build APK
        run: |
          echo "üèóÔ∏è ==== –°–ë–û–†–ö–ê APK ===="
          echo "üèóÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
          export ANDROID_SDK_ROOT=/home/runner/android-sdk
          export ANDROID_HOME=/home/runner/android-sdk
          export PATH="$PATH:/home/runner/android-sdk/platform-tools:/home/runner/android-sdk/cmdline-tools/latest/bin"
          
          echo "üèóÔ∏è ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "üèóÔ∏è ANDROID_HOME: $ANDROID_HOME"
          echo "üèóÔ∏è PATH: $PATH"
          
          echo "üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ Gradle wrapper..."
          ls -la ./gradlew || echo "‚ùå gradlew –Ω–µ –Ω–∞–π–¥–µ–Ω"
          chmod +x ./gradlew || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ gradlew"
          
          echo "üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ app/build.gradle..."
          ls -la app/build.gradle || echo "‚ùå app/build.gradle –Ω–µ –Ω–∞–π–¥–µ–Ω"
          cat app/build.gradle | grep -E "(versionName|versionCode|applicationId)" || echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
          
          echo "üèóÔ∏è –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
          ./gradlew clean || { echo "‚ùå –û–®–ò–ë–ö–ê: gradlew clean failed"; exit 1; }
          
          echo "üèóÔ∏è –°–±–æ—Ä–∫–∞ debug APK..."
          ./gradlew assembleDebug || { echo "‚ùå –û–®–ò–ë–ö–ê: gradlew assembleDebug failed"; exit 1; }
          
          echo "üèóÔ∏è ==== –ü–†–û–í–ï–†–ö–ê –°–û–ë–†–ê–ù–ù–û–ì–û APK ===="
          echo "üèóÔ∏è –ü–æ–∏—Å–∫ APK —Ñ–∞–π–ª–æ–≤..."
          find . -name "*.apk" -type f || echo "‚ùå APK —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
          
          echo "üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ app/build/outputs/apk/debug/..."
          ls -la app/build/outputs/apk/debug/ || echo "‚ùå debug APK –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
          
          echo "üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ releases/debug..."
          mkdir -p releases/debug
          
          echo "üèóÔ∏è –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ APK..."
          cp app/build/outputs/apk/debug/app-debug.apk releases/debug/latest-debug.apk || { echo "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å APK"; exit 1; }
          
          echo "üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ APK..."
          ls -la releases/debug/latest-debug.apk || echo "‚ùå APK –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ releases/debug/"
          
          echo "üèóÔ∏è –†–∞–∑–º–µ—Ä APK:"
          du -h releases/debug/latest-debug.apk || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä APK"
          
          echo "üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ APK —á–µ—Ä–µ–∑ aapt..."
          /home/runner/android-sdk/build-tools/*/aapt dump badging releases/debug/latest-debug.apk | head -10 || echo "‚ùå aapt failed"
          
      - name: üì¶ Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: FinancialSuccess-v${{ needs.setup-android-sdk.outputs.version }}-${{ needs.setup-android-sdk.outputs.date }}
          path: releases/debug/latest-debug.apk

  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  screenshots-phone:
    runs-on: ubuntu-latest
    needs: [setup-android-sdk, build-and-test]
    env:
      ANDROID_SDK_ROOT: /home/runner/android-sdk
      ANDROID_HOME: /home/runner/android-sdk
    # –£–±—Ä–∞–Ω–æ —É—Å–ª–æ–≤–∏–µ should_release
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì¶ Download Android SDK artifact
      uses: actions/download-artifact@v4
      with:
        name: android-sdk
        path: ${{ env.ANDROID_SDK_ROOT }}
        
    - name: üì¶ Download APK artifact
      uses: actions/download-artifact@v4
      with:
        name: FinancialSuccess-v${{ needs.build-and-test.outputs.version }}-${{ needs.build-and-test.outputs.date }}
        path: releases/debug/
        
    - name: üßæ Log Android SDK structure
      run: |
        echo "üîç ==== –ü–†–û–í–ï–†–ö–ê –ó–ê–ì–†–£–ñ–ï–ù–ù–û–ì–û ANDROID SDK (PHONE) ===="
        echo "üîç ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
        ls -la $ANDROID_SDK_ROOT/ || echo "‚ùå ANDROID_SDK_ROOT –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        echo "üîç ==== –°–¢–†–£–ö–¢–£–†–ê SDK ===="
        find $ANDROID_SDK_ROOT/ -type d | head -20
        
        echo "üîç ==== –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–ê–ô–õ–û–í ===="
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ adb:"
        ls -la $ANDROID_SDK_ROOT/platform-tools/adb || echo "‚ùå adb –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ emulator:"
        ls -la $ANDROID_SDK_ROOT/emulator/emulator || echo "‚ùå emulator –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ avdmanager:"
        ls -la $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager || echo "‚ùå avdmanager –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ system-images:"
        find $ANDROID_SDK_ROOT/system-images/ -name "*.img" | head -5 || echo "‚ùå system-images –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        echo "üîç ==== –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ù–ê –í–´–ü–û–õ–ù–ï–ù–ò–ï ===="
        echo "üîç –ü—Ä–∞–≤–∞ –Ω–∞ adb:"
        ls -la $ANDROID_SDK_ROOT/platform-tools/adb | grep -E "^-r.x" || echo "‚ùå adb –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        
        echo "üîç –ü—Ä–∞–≤–∞ –Ω–∞ emulator:"
        ls -la $ANDROID_SDK_ROOT/emulator/emulator | grep -E "^-r.x" || echo "‚ùå emulator –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        
        echo "üîç –ü—Ä–∞–≤–∞ –Ω–∞ avdmanager:"
        ls -la $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager | grep -E "^-r.x" || echo "‚ùå avdmanager –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
    
    - name: üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (Phone)
      run: |
        echo "üîß ==== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–†–ê–í –ù–ê –í–´–ü–û–õ–ù–ï–ù–ò–ï ===="
        echo "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö SDK —Ñ–∞–π–ª–æ–≤..."
        
        chmod +x $ANDROID_SDK_ROOT/platform-tools/* || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è platform-tools"
        chmod +x $ANDROID_SDK_ROOT/emulator/* || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è emulator"
        chmod +x $ANDROID_SDK_ROOT/emulator/qemu/linux-x86_64/* || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è qemu"
        chmod +x $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/* || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è cmdline-tools"
        
        echo "üîß ==== –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ü–û–°–õ–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø ===="
        echo "üîß –ü—Ä–∞–≤–∞ –Ω–∞ adb:"
        ls -la $ANDROID_SDK_ROOT/platform-tools/adb | grep -E "^-r.x" || echo "‚ùå adb –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        
        echo "üîß –ü—Ä–∞–≤–∞ –Ω–∞ emulator:"
        ls -la $ANDROID_SDK_ROOT/emulator/emulator | grep -E "^-r.x" || echo "‚ùå emulator –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        
        echo "üîß –ü—Ä–∞–≤–∞ –Ω–∞ avdmanager:"
        ls -la $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager | grep -E "^-r.x" || echo "‚ùå avdmanager –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        
        echo "üîß ==== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î ===="
        echo "üîß –¢–µ—Å—Ç adb:"
        $ANDROID_SDK_ROOT/platform-tools/adb version || echo "‚ùå adb version failed"
        
        echo "üîß –¢–µ—Å—Ç emulator:"
        $ANDROID_SDK_ROOT/emulator/emulator -version || echo "‚ùå emulator version failed"
        
        echo "üîß –¢–µ—Å—Ç avdmanager:"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager list avd || echo "‚ùå avdmanager failed"

    - name: üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è adb –≤ PATH (phone)
      run: |
        echo "üîç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è adb..."
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y libc6:i386 libstdc++6:i386 lib32z1 lib32stdc++6
        
        echo "üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PATH –¥–ª—è adb..."
        export PATH="$PATH:/home/runner/android-sdk/platform-tools"
        echo "PATH: $PATH"
        
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è adb..."
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ adb..."
        ls -la /home/runner/android-sdk/platform-tools/adb || echo "‚ùå –§–∞–π–ª adb –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ..."
        file /home/runner/android-sdk/platform-tools/adb || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞"
        
        echo "üîç –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ adb –ø–æ –ø–æ–ª–Ω–æ–º—É –ø—É—Ç–∏..."
        /home/runner/android-sdk/platform-tools/adb version || echo "‚ùå adb version failed"
        
        echo "üîç –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ adb —á–µ—Ä–µ–∑ which..."
        which adb || echo "‚ùå which adb failed"
        
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ adb..."
        ldd /home/runner/android-sdk/platform-tools/adb || echo "‚ùå ldd failed"

    - name: üé≠ Install Maestro
      run: |
        curl -Ls "https://get.maestro.mobile.dev" | bash
        export PATH="$PATH:$HOME/.maestro/bin"
        echo "n" | maestro --version

    - name: üì± Start Android Emulator and Install APK (Phone)
      shell: bash
      env:
        ANDROID_SDK_ROOT: /home/runner/android-sdk
        ANDROID_HOME: /home/runner/android-sdk
      run: |
        echo "üì± ==== –ó–ê–ü–£–°–ö –≠–ú–£–õ–Ø–¢–û–†–ê –¢–ï–õ–ï–§–û–ù–ê ===="
        export PATH="$PATH:/home/runner/android-sdk/emulator:/home/runner/android-sdk/platform-tools:/home/runner/android-sdk/cmdline-tools/latest/bin"
        set -e
        
        echo "üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        echo "üì± SDK root: $ANDROID_SDK_ROOT"
        echo "üì± ANDROID_HOME: $ANDROID_HOME"
        echo "üì± PATH: $PATH"
        
        echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ system-images..."
        ls -la $ANDROID_SDK_ROOT/system-images/android-34/default/x86_64/ || echo "‚ùå system-images –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        echo "üì± –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö AVD..."
        rm -rf ~/.android/avd/*
        echo "üì± –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ~/.android/avd/ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:"
        ls -la ~/.android/avd/ || echo "‚ùå ~/.android/avd/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

        echo "üì± ==== –°–û–ó–î–ê–ù–ò–ï AVD ===="
        echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö AVD..."
        avdmanager list avd || echo "‚ùå avdmanager list avd failed"
        
        echo "üì± –°–æ–∑–¥–∞–Ω–∏–µ AVD ci_nexus5..."
        if ! avdmanager list avd | grep -q "ci_nexus5"; then
          echo "üì± AVD ci_nexus5 –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º..."
          echo "no" | avdmanager create avd --name "ci_nexus5" --package "system-images;android-34;default;x86_64" --device "Nexus 5" || { echo "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å AVD"; exit 1; }
          echo "‚úÖ AVD ci_nexus5 —Å–æ–∑–¥–∞–Ω"
        else
          echo "‚úÖ AVD ci_nexus5 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        fi
        
        echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ AVD..."
        avdmanager list avd | grep ci_nexus5 || echo "‚ùå AVD ci_nexus5 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ"

        echo "üì± ==== –ó–ê–ü–£–°–ö –≠–ú–£–õ–Ø–¢–û–†–ê ===="
        echo "üì± –ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞ –≤ —Ñ–æ–Ω–µ..."
        emulator -avd "ci_nexus5" -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -accel off -no-snapshot -no-metrics -verbose &
        EMULATOR_PID=$!
        echo "üì± PID —ç–º—É–ª—è—Ç–æ—Ä–∞: $EMULATOR_PID"
        
        echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞..."
        ps aux | grep emulator | grep -v grep || echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —ç–º—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"

        echo "üì± –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ (30 —Å–µ–∫—É–Ω–¥)..."
        sleep 30
        
        echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã..."
        ps aux | grep emulator | grep -v grep || echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —ç–º—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø–∞—É–∑—ã"

        echo "üì± ==== –û–ñ–ò–î–ê–ù–ò–ï –ü–û–Ø–í–õ–ï–ù–ò–Ø –í ADB ===="
        emulator_timeout=120
        emulator_elapsed=0
        for i in {1..60}; do
          echo "üì± –ü–æ–ø—ã—Ç–∫–∞ $i/60: –ø—Ä–æ–≤–µ—Ä–∫–∞ adb devices..."
          adb devices || echo "‚ùå adb devices failed"
          
          if adb devices | grep -q "emulator"; then
            echo "‚úÖ –≠–º—É–ª—è—Ç–æ—Ä –ø–æ—è–≤–∏–ª—Å—è –≤ adb"
            echo "üì± –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:"
            adb devices
            break
          fi
          
          if [ $i -eq 60 ]; then
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä –∑–∞ $emulator_timeout —Å–µ–∫—É–Ω–¥"
            echo "üì± –õ–æ–≥–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞:"
            ps aux | grep emulator | grep -v grep || echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —ç–º—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            kill $EMULATOR_PID 2>/dev/null || true
            exit 1
          fi
          
          sleep 2
          emulator_elapsed=$((emulator_elapsed + 2))
          if [ $((emulator_elapsed % 30)) -eq 0 ]; then
            echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞: $emulator_elapsed —Å–µ–∫—É–Ω–¥ –∏–∑ $emulator_timeout..."
            echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞:"
            ps aux | grep emulator | grep -v grep || echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —ç–º—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
          fi
        done

        echo "üì± ==== –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò ANDROID ===="
        boot_timeout=180
        boot_elapsed=0
        for i in {1..90}; do
          echo "üì± –ü–æ–ø—ã—Ç–∫–∞ $i/90: –ø—Ä–æ–≤–µ—Ä–∫–∞ sys.boot_completed..."
          adb shell getprop sys.boot_completed 2>/dev/null || echo "‚ùå adb shell getprop failed"
          
          if adb shell getprop sys.boot_completed 2>/dev/null | grep -q "1"; then
            echo "‚úÖ Android –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω"
            echo "üì± –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∑–∫–∏:"
            adb shell getprop | grep -E "(sys.boot_completed|init.svc.bootanim|init.svc.zygote)" || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞"
            break
          fi
          
          if [ $i -eq 90 ]; then
            echo "‚ùå Android –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∑–∞ $boot_timeout —Å–µ–∫—É–Ω–¥"
            echo "üì± –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∑–∫–∏:"
            adb shell getprop | grep -E "(sys.boot_completed|init.svc.bootanim|init.svc.zygote)" || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞"
            kill $EMULATOR_PID 2>/dev/null || true
            exit 1
          fi
          
          sleep 2
          boot_elapsed=$((boot_elapsed + 2))
          if [ $((boot_elapsed % 30)) -eq 0 ]; then
            echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Android: $boot_elapsed —Å–µ–∫—É–Ω–¥ –∏–∑ $boot_timeout..."
            echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞:"
            ps aux | grep emulator | grep -v grep || echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —ç–º—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
          fi
        done

        echo "üì± ==== –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –≠–ö–†–ê–ù–ê ===="
        echo "üì± –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞..."
        adb shell input keyevent 82 || echo "‚ùå keyevent 82 failed"
        adb shell input keyevent 82 || echo "‚ùå keyevent 82 failed"
        sleep 2

        echo "üì± ==== –£–°–¢–ê–ù–û–í–ö–ê APK ===="
        echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è APK..."
        if [ ! -f "releases/debug/latest-debug.apk" ]; then
          echo "‚ùå Error: latest-debug.apk not found in releases/debug/"
          echo "üì± –°–æ–¥–µ—Ä–∂–∏–º–æ–µ releases/debug/:"
          ls -la releases/debug/ || echo "‚ùå releases/debug/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
          echo "üì± –ü–æ–∏—Å–∫ APK —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ:"
          find . -name "*.apk" -type f || echo "‚ùå APK —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
          kill $EMULATOR_PID 2>/dev/null || true
          exit 1
        fi
        
        echo "üì± –†–∞–∑–º–µ—Ä APK:"
        du -h releases/debug/latest-debug.apk || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä APK"
        
        echo "üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ APK..."
        adb install releases/debug/latest-debug.apk || { echo "‚ùå –û–®–ò–ë–ö–ê: adb install failed"; kill $EMULATOR_PID 2>/dev/null || true; exit 1; }
        
        echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ APK..."
        adb shell pm list packages | grep financialsuccess || echo "‚ùå –ü–∞–∫–µ—Ç financialsuccess –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if adb shell pm list packages | grep -q financialsuccess; then
          echo "‚úÖ APK —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
          echo "üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ:"
          adb shell pm dump financialsuccess | head -20 || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ"
        else
          echo "‚ùå Error: APK installation failed"
          echo "üì± –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤:"
          adb shell pm list packages | head -20 || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤"
          kill $EMULATOR_PID 2>/dev/null || true
          exit 1
        fi

        echo "üì± ==== –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ ===="
        echo "üì± –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞..."
        kill $EMULATOR_PID 2>/dev/null || true
        pkill -f emulator 2>/dev/null || true
        
        echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞..."
        sleep 5
        ps aux | grep emulator | grep -v grep || echo "‚úÖ –≠–º—É–ª—è—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    - name: üì∏ Run Maestro Screenshots (Phone)
      run: |
        export PATH="$PATH:$HOME/.maestro/bin"
        mkdir -p screenshots/phone
        
        # –ü—Ä–æ–±—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        local config_file="maestro/screenshots-stable.yaml"
        if [ ! -f "$config_file" ]; then
          config_file="maestro/screenshots.yaml"
        fi
        
        if [ -f "$config_file" ]; then
          echo "Using phone screenshots configuration: $config_file"
          maestro test "$config_file" --format junit --output screenshots/phone/
          echo "üì± Phone screenshots completed!"
        else
          echo "‚ö†Ô∏è Warning: Maestro configuration file not found: $config_file"
          echo "üì± Phone screenshots skipped!"
        fi

    - name: üì§ Upload Phone Screenshots
      uses: actions/upload-artifact@v4
      with:
        name: phone-screenshots-v${{ needs.build-and-test.outputs.version }}
        path: screenshots/phone/
        retention-days: 30

  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç–∞
  screenshots-tablet:
    runs-on: ubuntu-latest
    needs: [setup-android-sdk, build-and-test]
    env:
      ANDROID_SDK_ROOT: /home/runner/android-sdk
      ANDROID_HOME: /home/runner/android-sdk
    # –£–±—Ä–∞–Ω–æ —É—Å–ª–æ–≤–∏–µ should_release
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì¶ Download Android SDK artifact
      uses: actions/download-artifact@v4
      with:
        name: android-sdk
        path: ${{ env.ANDROID_SDK_ROOT }}
        
    - name: üì¶ Download APK artifact
      uses: actions/download-artifact@v4
      with:
        name: FinancialSuccess-v${{ needs.build-and-test.outputs.version }}-${{ needs.build-and-test.outputs.date }}
        path: releases/debug/
        
    - name: üßæ Log Android SDK structure
      run: |
        echo "üîç ==== –ü–†–û–í–ï–†–ö–ê –ó–ê–ì–†–£–ñ–ï–ù–ù–û–ì–û ANDROID SDK (TABLET) ===="
        echo "üîç ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
        ls -la $ANDROID_SDK_ROOT/ || echo "‚ùå ANDROID_SDK_ROOT –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        echo "üîç ==== –°–¢–†–£–ö–¢–£–†–ê SDK ===="
        find $ANDROID_SDK_ROOT/ -type d | head -20
        
        echo "üîç ==== –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–ê–ô–õ–û–í ===="
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ adb:"
        ls -la $ANDROID_SDK_ROOT/platform-tools/adb || echo "‚ùå adb –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ emulator:"
        ls -la $ANDROID_SDK_ROOT/emulator/emulator || echo "‚ùå emulator –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ avdmanager:"
        ls -la $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager || echo "‚ùå avdmanager –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ system-images:"
        find $ANDROID_SDK_ROOT/system-images/ -name "*.img" | head -5 || echo "‚ùå system-images –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        echo "üîç ==== –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ù–ê –í–´–ü–û–õ–ù–ï–ù–ò–ï ===="
        echo "üîç –ü—Ä–∞–≤–∞ –Ω–∞ adb:"
        ls -la $ANDROID_SDK_ROOT/platform-tools/adb | grep -E "^-r.x" || echo "‚ùå adb –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        
        echo "üîç –ü—Ä–∞–≤–∞ –Ω–∞ emulator:"
        ls -la $ANDROID_SDK_ROOT/emulator/emulator | grep -E "^-r.x" || echo "‚ùå emulator –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        
        echo "üîç –ü—Ä–∞–≤–∞ –Ω–∞ avdmanager:"
        ls -la $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager | grep -E "^-r.x" || echo "‚ùå avdmanager –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
    
    - name: üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (Tablet)
      run: |
        echo "üîß ==== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–†–ê–í –ù–ê –í–´–ü–û–õ–ù–ï–ù–ò–ï ===="
        echo "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö SDK —Ñ–∞–π–ª–æ–≤..."
        
        chmod +x $ANDROID_SDK_ROOT/platform-tools/* || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è platform-tools"
        chmod +x $ANDROID_SDK_ROOT/emulator/* || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è emulator"
        chmod +x $ANDROID_SDK_ROOT/emulator/qemu/linux-x86_64/* || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è qemu"
        chmod +x $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/* || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è cmdline-tools"
        
        echo "üîß ==== –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ü–û–°–õ–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø ===="
        echo "üîß –ü—Ä–∞–≤–∞ –Ω–∞ adb:"
        ls -la $ANDROID_SDK_ROOT/platform-tools/adb | grep -E "^-r.x" || echo "‚ùå adb –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        
        echo "üîß –ü—Ä–∞–≤–∞ –Ω–∞ emulator:"
        ls -la $ANDROID_SDK_ROOT/emulator/emulator | grep -E "^-r.x" || echo "‚ùå emulator –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        
        echo "üîß –ü—Ä–∞–≤–∞ –Ω–∞ avdmanager:"
        ls -la $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager | grep -E "^-r.x" || echo "‚ùå avdmanager –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        
        echo "üîß ==== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î ===="
        echo "üîß –¢–µ—Å—Ç adb:"
        $ANDROID_SDK_ROOT/platform-tools/adb version || echo "‚ùå adb version failed"
        
        echo "üîß –¢–µ—Å—Ç emulator:"
        $ANDROID_SDK_ROOT/emulator/emulator -version || echo "‚ùå emulator version failed"
        
        echo "üîß –¢–µ—Å—Ç avdmanager:"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager list avd || echo "‚ùå avdmanager failed"

    - name: üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è adb –≤ PATH (tablet)
      run: |
        echo "üîç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è adb..."
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y libc6:i386 libstdc++6:i386 lib32z1 lib32stdc++6
        
        echo "üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PATH –¥–ª—è adb..."
        export PATH="$PATH:/home/runner/android-sdk/platform-tools"
        echo "PATH: $PATH"
        
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è adb..."
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ adb..."
        ls -la /home/runner/android-sdk/platform-tools/adb || echo "‚ùå –§–∞–π–ª adb –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ..."
        file /home/runner/android-sdk/platform-tools/adb || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞"
        
        echo "üîç –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ adb –ø–æ –ø–æ–ª–Ω–æ–º—É –ø—É—Ç–∏..."
        /home/runner/android-sdk/platform-tools/adb version || echo "‚ùå adb version failed"
        
        echo "üîç –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ adb —á–µ—Ä–µ–∑ which..."
        which adb || echo "‚ùå which adb failed"
        
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ adb..."
        ldd /home/runner/android-sdk/platform-tools/adb || echo "‚ùå ldd failed"

    - name: üé≠ Install Maestro
      run: |
        curl -Ls "https://get.maestro.mobile.dev" | bash
        export PATH="$PATH:$HOME/.maestro/bin"
        echo "n" | maestro --version

    - name: üì± Start Android Emulator and Install APK (Tablet)
      shell: bash
      env:
        ANDROID_SDK_ROOT: /home/runner/android-sdk
        ANDROID_HOME: /home/runner/android-sdk
      run: |
        echo "üì± ==== –ó–ê–ü–£–°–ö –≠–ú–£–õ–Ø–¢–û–†–ê –ü–õ–ê–ù–®–ï–¢–ê ===="
        export PATH="$PATH:/home/runner/android-sdk/emulator:/home/runner/android-sdk/platform-tools:/home/runner/android-sdk/cmdline-tools/latest/bin"
        set -e
        
        echo "üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        echo "üì± SDK root: $ANDROID_SDK_ROOT"
        echo "üì± ANDROID_HOME: $ANDROID_HOME"
        echo "üì± PATH: $PATH"
        
        echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ system-images..."
        ls -la $ANDROID_SDK_ROOT/system-images/android-34/default/x86_64/ || echo "‚ùå system-images –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        echo "üì± –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö AVD..."
        rm -rf ~/.android/avd/*
        echo "üì± –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ~/.android/avd/ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:"
        ls -la ~/.android/avd/ || echo "‚ùå ~/.android/avd/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

        echo "üì± ==== –°–û–ó–î–ê–ù–ò–ï AVD ===="
        echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö AVD..."
        avdmanager list avd || echo "‚ùå avdmanager list avd failed"
        
        echo "üì± –°–æ–∑–¥–∞–Ω–∏–µ AVD ci_nexus10..."
        if ! avdmanager list avd | grep -q "ci_nexus10"; then
          echo "üì± AVD ci_nexus10 –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º..."
          echo "no" | avdmanager create avd --name "ci_nexus10" --package "system-images;android-34;default;x86_64" --device "Nexus 10" || { echo "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å AVD"; exit 1; }
          echo "‚úÖ AVD ci_nexus10 —Å–æ–∑–¥–∞–Ω"
        else
          echo "‚úÖ AVD ci_nexus10 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        fi
        
        echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ AVD..."
        avdmanager list avd | grep ci_nexus10 || echo "‚ùå AVD ci_nexus10 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ"

        echo "üì± ==== –ó–ê–ü–£–°–ö –≠–ú–£–õ–Ø–¢–û–†–ê ===="
        echo "üì± –ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞ –≤ —Ñ–æ–Ω–µ..."
        emulator -avd "ci_nexus10" -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -accel off -no-snapshot -no-metrics -verbose &
        EMULATOR_PID=$!
        echo "üì± PID —ç–º—É–ª—è—Ç–æ—Ä–∞: $EMULATOR_PID"
        
        echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞..."
        ps aux | grep emulator | grep -v grep || echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —ç–º—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"

        echo "üì± –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ (30 —Å–µ–∫—É–Ω–¥)..."
        sleep 30
        
        echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã..."
        ps aux | grep emulator | grep -v grep || echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —ç–º—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø–∞—É–∑—ã"

        echo "üì± ==== –û–ñ–ò–î–ê–ù–ò–ï –ü–û–Ø–í–õ–ï–ù–ò–Ø –í ADB ===="
        emulator_timeout=120
        emulator_elapsed=0
        for i in {1..60}; do
          echo "üì± –ü–æ–ø—ã—Ç–∫–∞ $i/60: –ø—Ä–æ–≤–µ—Ä–∫–∞ adb devices..."
          adb devices || echo "‚ùå adb devices failed"
          
          if adb devices | grep -q "emulator"; then
            echo "‚úÖ –≠–º—É–ª—è—Ç–æ—Ä –ø–æ—è–≤–∏–ª—Å—è –≤ adb"
            echo "üì± –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:"
            adb devices
            break
          fi
          
          if [ $i -eq 60 ]; then
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä –∑–∞ $emulator_timeout —Å–µ–∫—É–Ω–¥"
            echo "üì± –õ–æ–≥–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞:"
            ps aux | grep emulator | grep -v grep || echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —ç–º—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            kill $EMULATOR_PID 2>/dev/null || true
            exit 1
          fi
          
          sleep 2
          emulator_elapsed=$((emulator_elapsed + 2))
          if [ $((emulator_elapsed % 30)) -eq 0 ]; then
            echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞: $emulator_elapsed —Å–µ–∫—É–Ω–¥ –∏–∑ $emulator_timeout..."
            echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞:"
            ps aux | grep emulator | grep -v grep || echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —ç–º—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
          fi
        done

        echo "üì± ==== –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò ANDROID ===="
        boot_timeout=180
        boot_elapsed=0
        for i in {1..90}; do
          echo "üì± –ü–æ–ø—ã—Ç–∫–∞ $i/90: –ø—Ä–æ–≤–µ—Ä–∫–∞ sys.boot_completed..."
          adb shell getprop sys.boot_completed 2>/dev/null || echo "‚ùå adb shell getprop failed"
          
          if adb shell getprop sys.boot_completed 2>/dev/null | grep -q "1"; then
            echo "‚úÖ Android –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω"
            echo "üì± –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∑–∫–∏:"
            adb shell getprop | grep -E "(sys.boot_completed|init.svc.bootanim|init.svc.zygote)" || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞"
            break
          fi
          
          if [ $i -eq 90 ]; then
            echo "‚ùå Android –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∑–∞ $boot_timeout —Å–µ–∫—É–Ω–¥"
            echo "üì± –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∑–∫–∏:"
            adb shell getprop | grep -E "(sys.boot_completed|init.svc.bootanim|init.svc.zygote)" || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞"
            kill $EMULATOR_PID 2>/dev/null || true
            exit 1
          fi
          
          sleep 2
          boot_elapsed=$((boot_elapsed + 2))
          if [ $((boot_elapsed % 30)) -eq 0 ]; then
            echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Android: $boot_elapsed —Å–µ–∫—É–Ω–¥ –∏–∑ $boot_timeout..."
            echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞:"
            ps aux | grep emulator | grep -v grep || echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —ç–º—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
          fi
        done

        echo "üì± ==== –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –≠–ö–†–ê–ù–ê ===="
        echo "üì± –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞..."
        adb shell input keyevent 82 || echo "‚ùå keyevent 82 failed"
        adb shell input keyevent 82 || echo "‚ùå keyevent 82 failed"
        sleep 2

        echo "üì± ==== –£–°–¢–ê–ù–û–í–ö–ê APK ===="
        echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è APK..."
        if [ ! -f "releases/debug/latest-debug.apk" ]; then
          echo "‚ùå Error: latest-debug.apk not found in releases/debug/"
          echo "üì± –°–æ–¥–µ—Ä–∂–∏–º–æ–µ releases/debug/:"
          ls -la releases/debug/ || echo "‚ùå releases/debug/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
          echo "üì± –ü–æ–∏—Å–∫ APK —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ:"
          find . -name "*.apk" -type f || echo "‚ùå APK —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
          kill $EMULATOR_PID 2>/dev/null || true
          exit 1
        fi
        
        echo "üì± –†–∞–∑–º–µ—Ä APK:"
        du -h releases/debug/latest-debug.apk || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä APK"
        
        echo "üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ APK..."
        adb install releases/debug/latest-debug.apk || { echo "‚ùå –û–®–ò–ë–ö–ê: adb install failed"; kill $EMULATOR_PID 2>/dev/null || true; exit 1; }
        
        echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ APK..."
        adb shell pm list packages | grep financialsuccess || echo "‚ùå –ü–∞–∫–µ—Ç financialsuccess –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if adb shell pm list packages | grep -q financialsuccess; then
          echo "‚úÖ APK —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
          echo "üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ:"
          adb shell pm dump financialsuccess | head -20 || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ"
        else
          echo "‚ùå Error: APK installation failed"
          echo "üì± –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤:"
          adb shell pm list packages | head -20 || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤"
          kill $EMULATOR_PID 2>/dev/null || true
          exit 1
        fi

        echo "üì± ==== –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ ===="
        echo "üì± –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞..."
        kill $EMULATOR_PID 2>/dev/null || true
        pkill -f emulator 2>/dev/null || true
        
        echo "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞..."
        sleep 5
        ps aux | grep emulator | grep -v grep || echo "‚úÖ –≠–º—É–ª—è—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    - name: üì∏ Run Maestro Screenshots (Tablet)
      run: |
        export PATH="$PATH:$HOME/.maestro/bin"
        mkdir -p screenshots/tablet
        
        # –ü—Ä–æ–±—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç–∞
        local config_file="maestro/screenshots-tablet.yaml"
        if [ ! -f "$config_file" ]; then
          config_file="maestro/screenshots.yaml"
        fi
        
        if [ -f "$config_file" ]; then
          echo "Using tablet screenshots configuration: $config_file"
          maestro test "$config_file" --format junit --output screenshots/tablet/
          echo "üì± Tablet screenshots completed!"
        else
          echo "‚ö†Ô∏è Warning: Maestro configuration file not found: $config_file"
          echo "üì± Tablet screenshots skipped!"
        fi

    - name: üì§ Upload Tablet Screenshots
      uses: actions/upload-artifact@v4
      with:
        name: tablet-screenshots-v${{ needs.build-and-test.outputs.version }}
        path: screenshots/tablet/
        retention-days: 30

  # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Ä–µ–ª–∏–∑–∞
  create-release:
    runs-on: ubuntu-latest
    needs: [setup-android-sdk, build-and-test, screenshots-phone, screenshots-tablet]
    # –£–±—Ä–∞–Ω–æ —É—Å–ª–æ–≤–∏–µ should_release
    permissions:
      contents: write

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì• Download APK
      uses: actions/download-artifact@v4
      with:
        name: FinancialSuccess-v${{ needs.build-and-test.outputs.version }}-${{ needs.build-and-test.outputs.date }}

    - name: üì• Download Phone Screenshots
      uses: actions/download-artifact@v4
      with:
        name: phone-screenshots-v${{ needs.build-and-test.outputs.version }}

    - name: üì• Download Tablet Screenshots
      uses: actions/download-artifact@v4
      with:
        name: tablet-screenshots-v${{ needs.build-and-test.outputs.version }}

    - name: üì∏ Prepare screenshots for repository
      run: |
        mkdir -p screenshots/phone screenshots/tablet
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏
        if [ -d "screenshots/phone" ]; then
          cp -r screenshots/phone/* screenshots/phone/ 2>/dev/null || true
        fi
        if [ -d "screenshots/tablet" ]; then
          cp -r screenshots/tablet/* screenshots/tablet/ 2>/dev/null || true
        fi
        
        echo "üì± Phone screenshots:"
        ls -la screenshots/phone/ 2>/dev/null || echo "No phone screenshots"
        echo ""
        echo "üì± Tablet screenshots:"
        ls -la screenshots/tablet/ 2>/dev/null || echo "No tablet screenshots"

    - name: üìù Commit Screenshots to Repository
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add screenshots/
        if git diff --staged --quiet; then
          echo "No screenshots to commit"
        else
          git commit -m "üì∏ Auto-generated screenshots v${{ needs.build-and-test.outputs.version }} - ${{ needs.build-and-test.outputs.date }}
          
          üì± Screenshots:
          - Phone: $(ls screenshots/phone/*.png 2>/dev/null | wc -l) files
          - Tablet: $(ls screenshots/tablet/*.png 2>/dev/null | wc -l) files
          - Total: $(find screenshots/ -name "*.png" 2>/dev/null | wc -l) files"
          git push
        fi

    - name: üè∑Ô∏è Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build-and-test.outputs.version }}-${{ needs.build-and-test.outputs.date }}
        name: "üéÆ Financial Success v${{ needs.build-and-test.outputs.version }}"
        body_path: RELEASE_NOTES.md
        files: |
          releases/debug/*.apk
          screenshots/phone/*.png
          screenshots/tablet/*.png
        draft: false
        prerelease: false
        generate_release_notes: false

    - name: üìä Build Summary
      run: |
        echo "üéâ Release completed successfully!"
        echo ""
        echo "ÔøΩ Results:"
        echo "ÔøΩÔøΩ Version: ${{ needs.build-and-test.outputs.version }}"
        echo "üî¢ Version Code: ${{ needs.build-and-test.outputs.version_code }}"
        echo "üìÖ Date: ${{ needs.build-and-test.outputs.date }}"
        echo "ÔøΩ APK: releases/debug/FinancialSuccess-v${{ needs.build-and-test.outputs.version }}-${{ needs.build-and-test.outputs.date }}-debug.apk"
        echo "üì∏ Phone screenshots: screenshots/phone/"
        echo "üì∏ Tablet screenshots: screenshots/tablet/"
        echo ""
        echo "ÔøΩ Files:"
        ls -la releases/debug/ || echo "No APK files found"
        echo ""
        echo "üì∏ Phone screenshots:"
        ls -la screenshots/phone/ 2>/dev/null || echo "No phone screenshots"
        echo ""
        echo "üì∏ Tablet screenshots:"
        ls -la screenshots/tablet/ 2>/dev/null || echo "No tablet screenshots"
