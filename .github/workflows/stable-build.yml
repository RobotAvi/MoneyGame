name: 🚀 Stable Build & Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true
  MAESTRO_CLI_ANALYSIS_NOTIFICATION_DISABLED: "true"

jobs:
  setup-android-sdk:
    runs-on: ubuntu-latest
    outputs:
      sdk-path: /home/runner/android-sdk
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 🏗️ Prepare Android SDK directories
        id: set-sdk-path
        run: |
          echo "sdk_path=/home/runner/android-sdk" >> $GITHUB_OUTPUT
          mkdir -p /home/runner/android-sdk
          echo "ANDROID_SDK_ROOT=/home/runner/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=/home/runner/android-sdk" >> $GITHUB_ENV
      - name: 🛠️ Download and install Android commandline tools
        run: |
          set -x
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $HOME
          mkdir -p $HOME/android-sdk/cmdline-tools
          mv $HOME/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
          echo "==== cmdline-tools structure ===="
          find $HOME/android-sdk/cmdline-tools/
      - name: 🛠️ Install Android SDK components
        run: |
          set -x
          export ANDROID_SDK_ROOT=/home/runner/android-sdk
          export ANDROID_HOME=/home/runner/android-sdk
          export PATH="$PATH:/home/runner/android-sdk/emulator:/home/runner/android-sdk/platform-tools:/home/runner/android-sdk/cmdline-tools/latest/bin"
          yes | sdkmanager --licenses || { echo "sdkmanager license error"; exit 1; }
          sdkmanager "platform-tools" "emulator" "system-images;android-34;default;x86_64" || { echo "sdkmanager install error"; exit 1; }
          echo "==== system-images after install ===="
          find $ANDROID_SDK_ROOT/system-images/ || echo "system-images dir not found"
      - name: 📦 Upload Android SDK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-sdk
          path: ${{ env.ANDROID_SDK_ROOT }}

  # Основная сборка и тестирование
  build-and-test:
    runs-on: ubuntu-latest
    needs: setup-android-sdk
    env:
      ANDROID_SDK_ROOT: /home/runner/android-sdk
      ANDROID_HOME: /home/runner/android-sdk
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_code: ${{ steps.version.outputs.version_code }}
      date: ${{ steps.date.outputs.date }}
      apk_path: ${{ steps.apk_path.outputs.path }}
    # should_release больше не нужен

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Получаем полную историю для changelog

    - name: 🔍 Determine if this is a release build
      id: should_release
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "value=true" >> $GITHUB_OUTPUT
        else
          echo "value=false" >> $GITHUB_OUTPUT
        fi

    - name: 🔖 Bump version (only for releases)
      id: bump_version
      if: steps.should_release.outputs.value == 'true'
      run: |
        # Получаем текущую версию
        CURR_VERSION=$(grep -oP 'versionName\s+"\K[^"]+' app/build.gradle)
        CURR_CODE=$(grep -oP 'versionCode\s+\K[0-9]+' app/build.gradle)
        
        # Инкрементируем minor версию (x.y -> x.(y+1))
        MAJOR=$(echo $CURR_VERSION | cut -d. -f1)
        MINOR=$(echo $CURR_VERSION | cut -d. -f2)
        if [ -z "$MINOR" ]; then MINOR=0; fi
        NEW_MINOR=$((MINOR+1))
        NEW_VERSION="$MAJOR.$NEW_MINOR"
        NEW_CODE=$((CURR_CODE+1))
        
        # Обновляем build.gradle
        sed -i "s/versionName \"$CURR_VERSION\"/versionName \"$NEW_VERSION\"/" app/build.gradle
        sed -i "s/versionCode $CURR_CODE/versionCode $NEW_CODE/" app/build.gradle
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "new_code=$NEW_CODE" >> $GITHUB_OUTPUT
        echo "Version bumped: $CURR_VERSION → $NEW_VERSION ($CURR_CODE → $NEW_CODE)"
        
        # Коммитим изменения
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add app/build.gradle
        git commit -m "🔖 Bump version to $NEW_VERSION ($NEW_CODE) [auto]" || echo "No version change to commit"
        git push || echo "No changes to push"

    - name: 📝 Generate release notes (only for releases)
      id: release_notes
      if: steps.should_release.outputs.value == 'true'
      run: |
        echo "## 🎮 Financial Success v${{ steps.bump_version.outputs.new_version }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### 📅 Дата релиза: $(date '+%Y-%m-%d %H:%M UTC')" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### 🔄 Последние изменения:" >> RELEASE_NOTES.md
        git log --oneline -10 >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### 📋 Изменения из CHANGELOG.md:" >> RELEASE_NOTES.md
        if [ -f "docs/CHANGELOG.md" ]; then
          tail -n 20 docs/CHANGELOG.md >> RELEASE_NOTES.md
        fi
        cat RELEASE_NOTES.md

    - name: 📝 Commit release notes (only for releases)
      if: steps.should_release.outputs.value == 'true'
      run: |
        git add RELEASE_NOTES.md
        git commit -m "📝 Update release notes [auto]" || echo "No release notes change to commit"
        git push || echo "No changes to push"

    - name: ☕ Setup JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: 🔍 Check dependencies
      run: |
        echo "🔍 Checking dependencies..."
        
        # Проверка Java
        java_version=$(java -version 2>&1 | head -n 1 | cut -d'"' -f2 | cut -d'.' -f1)
        echo "☕ Java version: $java_version"
        if [ "$java_version" != "21" ]; then
          echo "⚠️ Warning: Recommended Java 21, found: $java_version"
        fi
        
        # Проверка gradlew
        if [ ! -f "gradlew" ]; then
          echo "❌ Error: gradlew not found"
          exit 1
        fi
        
        echo "✅ Dependencies checked"

    - name: 🤖 Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: 📦 Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.android/build-cache
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: 📦 Download Android SDK artifact
      uses: actions/download-artifact@v4
      with:
        name: android-sdk
        path: ${{ env.ANDROID_SDK_ROOT }}
    - name: 🧾 Log Android SDK structure
      run: |
        echo "==== ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT ===="
        find $ANDROID_SDK_ROOT/

    - name: 🏗️ Log build directories before assemble
      run: |
        echo "==== BEFORE BUILD: app/build/outputs ===="
        find app/build/outputs || echo "No outputs dir yet"

    - name: 🏗️ Assemble Debug APK
      run: |
        echo "==== RUN ./gradlew assembleDebug ===="
        ./gradlew assembleDebug --stacktrace --info

    - name: 🏗️ Log build directories after assemble
      run: |
        echo "==== AFTER BUILD: app/build/outputs ===="
        find app/build/outputs || echo "No outputs dir"

    - name: 📱 Prepare APK for distribution
      id: apk_path
      run: |
        echo "📱 Preparing APK for distribution..."
        
        # Проверяем, что APK существует
        if [ ! -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "❌ Error: Debug APK not found"
          ls -la app/build/outputs/apk/debug/ || echo "Debug directory not found"
          exit 1
        fi
        
        mkdir -p releases/debug
        cp app/build/outputs/apk/debug/app-debug.apk releases/debug/
        cd releases/debug
        
        # Переименовываем с версией и датой
        newname="FinancialSuccess-v${{ steps.version.outputs.version }}-${{ steps.date.outputs.date }}-debug.apk"
        mv -f app-debug.apk "$newname"
        echo "path=releases/debug/$newname" >> $GITHUB_OUTPUT
        
        # Создаем символическую ссылку на latest
        ln -sf "$newname" "latest-debug.apk"
        
        # Очищаем старые APK (оставляем только 5 последних)
        ls -tp FinancialSuccess-v*-debug.apk | grep -v '/$' | tail -n +6 | xargs -r rm -- 2>/dev/null || true
        
        echo "✅ APK prepared: $newname"
        echo "📊 APK files:"
        ls -la

    - name: 📤 Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: FinancialSuccess-v${{ steps.version.outputs.version }}-${{ steps.date.outputs.date }}
        path: releases/debug/*.apk
        retention-days: 30

    - name: 💾 Commit APK files (only for releases)
      if: steps.should_release.outputs.value == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add releases/
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "📱 Auto-commit APK v${{ steps.version.outputs.version }} - ${{ steps.date.outputs.date }}
          
          🔧 Build info:
          - Version: ${{ steps.version.outputs.version }}
          - Version Code: ${{ steps.version.outputs.version_code }}
          - Date: ${{ steps.date.outputs.date }}
          - Branch: ${{ github.ref_name }}
          - Commit: ${{ github.sha }}"
          git push
        fi

  # Параллельная генерация скриншотов для телефона
  screenshots-phone:
    runs-on: ubuntu-latest
    needs: [build-and-test, setup-android-sdk]
    env:
      ANDROID_SDK_ROOT: /home/runner/android-sdk
      ANDROID_HOME: /home/runner/android-sdk
    # Убрано условие should_release
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Download Android SDK artifact
      uses: actions/download-artifact@v4
      with:
        name: android-sdk
        path: ${{ env.ANDROID_SDK_ROOT }}
    - name: 🧾 Log Android SDK structure
      run: |
        echo "==== ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT ===="
        find $ANDROID_SDK_ROOT/

    - name: 🔍 Проверка наличия adb в PATH (phone)
      run: |
        export PATH="$PATH:/home/runner/android-sdk/platform-tools"
        echo "PATH: $PATH"
        which adb
        adb version

    - name: 🎭 Install Maestro
      run: |
        curl -Ls "https://get.maestro.mobile.dev" | bash
        export PATH="$PATH:$HOME/.maestro/bin"
        echo "n" | maestro --version

    - name: 📱 Start Android Emulator and Install APK (Phone)
      shell: bash
      env:
        ANDROID_SDK_ROOT: ${{ runner.home }}/android-sdk
        ANDROID_HOME: ${{ runner.home }}/android-sdk
      run: |
        export PATH="$PATH:/home/runner/android-sdk/emulator:/home/runner/android-sdk/platform-tools:/home/runner/android-sdk/cmdline-tools/latest/bin"
        set -e
        echo "SDK root: $ANDROID_SDK_ROOT"
        echo "PATH: $PATH"
        ls -la $ANDROID_SDK_ROOT/system-images/android-34/default/x86_64/
        rm -rf ~/.android/avd/*

        # Создание AVD, если не существует
        if ! avdmanager list avd | grep -q "ci_nexus5"; then
          echo "no" | avdmanager create avd --name "ci_nexus5" --package "system-images;android-34;default;x86_64" --device "Nexus 5"
        fi

        # Запуск эмулятора в фоне
        emulator -avd "ci_nexus5" -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -accel off -no-snapshot -no-metrics &
        EMULATOR_PID=$!

        # Пауза после запуска эмулятора (важно для CI)
        sleep 30

        # Ожидание появления устройства в adb (таймаут 120с)
        emulator_timeout=120
        emulator_elapsed=0
        for i in {1..60}; do
          if adb devices | grep -q "emulator"; then
            echo "✅ Эмулятор появился в adb"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "❌ Не удалось запустить эмулятор за $emulator_timeout секунд"
            kill $EMULATOR_PID 2>/dev/null || true
            exit 1
          fi
          sleep 2
          emulator_elapsed=$((emulator_elapsed + 2))
          if [ $((emulator_elapsed % 30)) -eq 0 ]; then
            echo "⏳ Ожидание эмулятора: $emulator_elapsed секунд из $emulator_timeout..."
          fi
        done

        # Ожидание загрузки Android (sys.boot_completed, таймаут 180с)
        boot_timeout=180
        boot_elapsed=0
        for i in {1..90}; do
          if adb shell getprop sys.boot_completed 2>/dev/null | grep -q "1"; then
            echo "✅ Android полностью загружен"
            break
          fi
          if [ $i -eq 90 ]; then
            echo "❌ Android не загрузился за $boot_timeout секунд"
            kill $EMULATOR_PID 2>/dev/null || true
            exit 1
          fi
          sleep 2
          boot_elapsed=$((boot_elapsed + 2))
          if [ $((boot_elapsed % 30)) -eq 0 ]; then
            echo "⏳ Ожидание загрузки Android: $boot_elapsed секунд из $boot_timeout..."
          fi
        done

        # Разблокировка экрана
        adb shell input keyevent 82
        adb shell input keyevent 82
        sleep 2

        # Установка APK
        if [ ! -f "releases/debug/latest-debug.apk" ]; then
          echo "❌ Error: latest-debug.apk not found in releases/debug/"
          ls -la releases/debug/
          kill $EMULATOR_PID 2>/dev/null || true
          exit 1
        fi
        adb install releases/debug/latest-debug.apk
        if adb shell pm list packages | grep -q financialsuccess; then
          echo "✅ APK успешно установлен"
        else
          echo "❌ Error: APK installation failed"
          kill $EMULATOR_PID 2>/dev/null || true
          exit 1
        fi

        # ... скриншоты будут сниматься следующим шагом ...

        # Остановка эмулятора
        kill $EMULATOR_PID 2>/dev/null || true
        pkill -f emulator 2>/dev/null || true

    - name: 📸 Run Maestro Screenshots (Phone)
      run: |
        export PATH="$PATH:$HOME/.maestro/bin"
        mkdir -p screenshots/phone
        
        # Пробуем специфичную конфигурацию для телефона
        local config_file="maestro/screenshots-stable.yaml"
        if [ ! -f "$config_file" ]; then
          config_file="maestro/screenshots.yaml"
        fi
        
        if [ -f "$config_file" ]; then
          echo "Using phone screenshots configuration: $config_file"
          maestro test "$config_file" --format junit --output screenshots/phone/
          echo "📱 Phone screenshots completed!"
        else
          echo "⚠️ Warning: Maestro configuration file not found: $config_file"
          echo "📱 Phone screenshots skipped!"
        fi

    - name: 📤 Upload Phone Screenshots
      uses: actions/upload-artifact@v4
      with:
        name: phone-screenshots-v${{ needs.build-and-test.outputs.version }}
        path: screenshots/phone/
        retention-days: 30

  # Параллельная генерация скриншотов для планшета
  screenshots-tablet:
    runs-on: ubuntu-latest
    needs: [build-and-test, setup-android-sdk]
    env:
      ANDROID_SDK_ROOT: /home/runner/android-sdk
      ANDROID_HOME: /home/runner/android-sdk
    # Убрано условие should_release
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Download Android SDK artifact
      uses: actions/download-artifact@v4
      with:
        name: android-sdk
        path: ${{ env.ANDROID_SDK_ROOT }}
    - name: 🧾 Log Android SDK structure
      run: |
        echo "==== ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT ===="
        find $ANDROID_SDK_ROOT/

    - name: 🔍 Проверка наличия adb в PATH (tablet)
      run: |
        export PATH="$PATH:/home/runner/android-sdk/platform-tools"
        echo "PATH: $PATH"
        which adb
        adb version

    - name: 🎭 Install Maestro
      run: |
        curl -Ls "https://get.maestro.mobile.dev" | bash
        export PATH="$PATH:$HOME/.maestro/bin"
        echo "n" | maestro --version

    - name: 📱 Start Android Emulator and Install APK (Tablet)
      shell: bash
      env:
        ANDROID_SDK_ROOT: ${{ runner.home }}/android-sdk
        ANDROID_HOME: ${{ runner.home }}/android-sdk
      run: |
        export PATH="$PATH:/home/runner/android-sdk/emulator:/home/runner/android-sdk/platform-tools:/home/runner/android-sdk/cmdline-tools/latest/bin"
        set -e
        echo "SDK root: $ANDROID_SDK_ROOT"
        echo "PATH: $PATH"
        ls -la $ANDROID_SDK_ROOT/system-images/android-34/default/x86_64/
        rm -rf ~/.android/avd/*

        # Создание AVD, если не существует
        if ! avdmanager list avd | grep -q "ci_nexus10"; then
          echo "no" | avdmanager create avd --name "ci_nexus10" --package "system-images;android-34;default;x86_64" --device "Nexus 10"
        fi

        # Запуск эмулятора в фоне
        emulator -avd "ci_nexus10" -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -accel off -no-snapshot -no-metrics &
        EMULATOR_PID=$!

        # Пауза после запуска эмулятора (важно для CI)
        sleep 30

        # Ожидание появления устройства в adb (таймаут 120с)
        emulator_timeout=120
        emulator_elapsed=0
        for i in {1..60}; do
          if adb devices | grep -q "emulator"; then
            echo "✅ Эмулятор появился в adb"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "❌ Не удалось запустить эмулятор за $emulator_timeout секунд"
            kill $EMULATOR_PID 2>/dev/null || true
            exit 1
          fi
          sleep 2
          emulator_elapsed=$((emulator_elapsed + 2))
          if [ $((emulator_elapsed % 30)) -eq 0 ]; then
            echo "⏳ Ожидание эмулятора: $emulator_elapsed секунд из $emulator_timeout..."
          fi
        done

        # Ожидание загрузки Android (sys.boot_completed, таймаут 180с)
        boot_timeout=180
        boot_elapsed=0
        for i in {1..90}; do
          if adb shell getprop sys.boot_completed 2>/dev/null | grep -q "1"; then
            echo "✅ Android полностью загружен"
            break
          fi
          if [ $i -eq 90 ]; then
            echo "❌ Android не загрузился за $boot_timeout секунд"
            kill $EMULATOR_PID 2>/dev/null || true
            exit 1
          fi
          sleep 2
          boot_elapsed=$((boot_elapsed + 2))
          if [ $((boot_elapsed % 30)) -eq 0 ]; then
            echo "⏳ Ожидание загрузки Android: $boot_elapsed секунд из $boot_timeout..."
          fi
        done

        # Разблокировка экрана
        adb shell input keyevent 82
        adb shell input keyevent 82
        sleep 2

        # Установка APK
        if [ ! -f "releases/debug/latest-debug.apk" ]; then
          echo "❌ Error: latest-debug.apk not found in releases/debug/"
          ls -la releases/debug/
          kill $EMULATOR_PID 2>/dev/null || true
          exit 1
        fi
        adb install releases/debug/latest-debug.apk
        if adb shell pm list packages | grep -q financialsuccess; then
          echo "✅ APK успешно установлен"
        else
          echo "❌ Error: APK installation failed"
          kill $EMULATOR_PID 2>/dev/null || true
          exit 1
        fi

        # ... скриншоты будут сниматься следующим шагом ...

        # Остановка эмулятора
        kill $EMULATOR_PID 2>/dev/null || true
        pkill -f emulator 2>/dev/null || true

    - name: 📸 Run Maestro Screenshots (Tablet)
      run: |
        export PATH="$PATH:$HOME/.maestro/bin"
        mkdir -p screenshots/tablet
        
        # Пробуем специфичную конфигурацию для планшета
        local config_file="maestro/screenshots-tablet.yaml"
        if [ ! -f "$config_file" ]; then
          config_file="maestro/screenshots.yaml"
        fi
        
        if [ -f "$config_file" ]; then
          echo "Using tablet screenshots configuration: $config_file"
          maestro test "$config_file" --format junit --output screenshots/tablet/
          echo "📱 Tablet screenshots completed!"
        else
          echo "⚠️ Warning: Maestro configuration file not found: $config_file"
          echo "📱 Tablet screenshots skipped!"
        fi

    - name: 📤 Upload Tablet Screenshots
      uses: actions/upload-artifact@v4
      with:
        name: tablet-screenshots-v${{ needs.build-and-test.outputs.version }}
        path: screenshots/tablet/
        retention-days: 30

  # Финальная сборка релиза
  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-test, screenshots-phone, screenshots-tablet]
    # Убрано условие should_release
    permissions:
      contents: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download APK
      uses: actions/download-artifact@v4
      with:
        name: FinancialSuccess-v${{ needs.build-and-test.outputs.version }}-${{ needs.build-and-test.outputs.date }}

    - name: 📥 Download Phone Screenshots
      uses: actions/download-artifact@v4
      with:
        name: phone-screenshots-v${{ needs.build-and-test.outputs.version }}

    - name: 📥 Download Tablet Screenshots
      uses: actions/download-artifact@v4
      with:
        name: tablet-screenshots-v${{ needs.build-and-test.outputs.version }}

    - name: 📸 Prepare screenshots for repository
      run: |
        mkdir -p screenshots/phone screenshots/tablet
        
        # Копируем скриншоты в правильные папки
        if [ -d "screenshots/phone" ]; then
          cp -r screenshots/phone/* screenshots/phone/ 2>/dev/null || true
        fi
        if [ -d "screenshots/tablet" ]; then
          cp -r screenshots/tablet/* screenshots/tablet/ 2>/dev/null || true
        fi
        
        echo "📱 Phone screenshots:"
        ls -la screenshots/phone/ 2>/dev/null || echo "No phone screenshots"
        echo ""
        echo "📱 Tablet screenshots:"
        ls -la screenshots/tablet/ 2>/dev/null || echo "No tablet screenshots"

    - name: 📝 Commit Screenshots to Repository
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add screenshots/
        if git diff --staged --quiet; then
          echo "No screenshots to commit"
        else
          git commit -m "📸 Auto-generated screenshots v${{ needs.build-and-test.outputs.version }} - ${{ needs.build-and-test.outputs.date }}
          
          📱 Screenshots:
          - Phone: $(ls screenshots/phone/*.png 2>/dev/null | wc -l) files
          - Tablet: $(ls screenshots/tablet/*.png 2>/dev/null | wc -l) files
          - Total: $(find screenshots/ -name "*.png" 2>/dev/null | wc -l) files"
          git push
        fi

    - name: 🏷️ Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build-and-test.outputs.version }}-${{ needs.build-and-test.outputs.date }}
        name: "🎮 Financial Success v${{ needs.build-and-test.outputs.version }}"
        body_path: RELEASE_NOTES.md
        files: |
          releases/debug/*.apk
          screenshots/phone/*.png
          screenshots/tablet/*.png
        draft: false
        prerelease: false
        generate_release_notes: false

    - name: 📊 Build Summary
      run: |
        echo "🎉 Release completed successfully!"
        echo ""
        echo "� Results:"
        echo "�� Version: ${{ needs.build-and-test.outputs.version }}"
        echo "🔢 Version Code: ${{ needs.build-and-test.outputs.version_code }}"
        echo "📅 Date: ${{ needs.build-and-test.outputs.date }}"
        echo "� APK: releases/debug/FinancialSuccess-v${{ needs.build-and-test.outputs.version }}-${{ needs.build-and-test.outputs.date }}-debug.apk"
        echo "📸 Phone screenshots: screenshots/phone/"
        echo "📸 Tablet screenshots: screenshots/tablet/"
        echo ""
        echo "� Files:"
        ls -la releases/debug/ || echo "No APK files found"
        echo ""
        echo "📸 Phone screenshots:"
        ls -la screenshots/phone/ 2>/dev/null || echo "No phone screenshots"
        echo ""
        echo "📸 Tablet screenshots:"
        ls -la screenshots/tablet/ 2>/dev/null || echo "No tablet screenshots"
