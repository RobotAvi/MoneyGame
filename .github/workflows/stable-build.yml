name: üöÄ Stable Build & Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  ACTIONS_RUNNER_DEBUG: true
  RUNNER_DEBUG: 1
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true

jobs:
  # –û—Å–Ω–æ–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_code: ${{ steps.version.outputs.version_code }}
      date: ${{ steps.date.outputs.date }}
      apk_path: ${{ steps.apk_path.outputs.path }}
      should_release: ${{ steps.should_release.outputs.value }}

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è changelog

    - name: üîç Determine if this is a release build
      id: should_release
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "value=true" >> $GITHUB_OUTPUT
        else
          echo "value=false" >> $GITHUB_OUTPUT
        fi

    - name: üîñ Bump version (only for releases)
      id: bump_version
      if: steps.should_release.outputs.value == 'true'
      run: |
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
        CURR_VERSION=$(grep -oP 'versionName\s+"\K[^"]+' app/build.gradle)
        CURR_CODE=$(grep -oP 'versionCode\s+\K[0-9]+' app/build.gradle)
        
        # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º minor –≤–µ—Ä—Å–∏—é (x.y -> x.(y+1))
        MAJOR=$(echo $CURR_VERSION | cut -d. -f1)
        MINOR=$(echo $CURR_VERSION | cut -d. -f2)
        if [ -z "$MINOR" ]; then MINOR=0; fi
        NEW_MINOR=$((MINOR+1))
        NEW_VERSION="$MAJOR.$NEW_MINOR"
        NEW_CODE=$((CURR_CODE+1))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º build.gradle
        sed -i "s/versionName \"$CURR_VERSION\"/versionName \"$NEW_VERSION\"/" app/build.gradle
        sed -i "s/versionCode $CURR_CODE/versionCode $NEW_CODE/" app/build.gradle
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "new_code=$NEW_CODE" >> $GITHUB_OUTPUT
        echo "Version bumped: $CURR_VERSION ‚Üí $NEW_VERSION ($CURR_CODE ‚Üí $NEW_CODE)"
        
        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add app/build.gradle
        git commit -m "üîñ Bump version to $NEW_VERSION ($NEW_CODE) [auto]" || echo "No version change to commit"
        git push || echo "No changes to push"

    - name: üìù Generate release notes (only for releases)
      id: release_notes
      if: steps.should_release.outputs.value == 'true'
      run: |
        echo "## üéÆ Financial Success v${{ steps.bump_version.outputs.new_version }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### üìÖ –î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞: $(date '+%Y-%m-%d %H:%M UTC')" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:" >> RELEASE_NOTES.md
        git log --oneline -10 >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ CHANGELOG.md:" >> RELEASE_NOTES.md
        if [ -f "docs/CHANGELOG.md" ]; then
          tail -n 20 docs/CHANGELOG.md >> RELEASE_NOTES.md
        fi
        cat RELEASE_NOTES.md

    - name: üìù Commit release notes (only for releases)
      if: steps.should_release.outputs.value == 'true'
      run: |
        git add RELEASE_NOTES.md
        git commit -m "üìù Update release notes [auto]" || echo "No release notes change to commit"
        git push || echo "No changes to push"

    - name: ‚òï Setup JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: ü§ñ Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: üì¶ Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.android/build-cache
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: üîß Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: üß™ Run Unit Tests
      run: ./gradlew test --no-daemon

    - name: üî® Build Debug APK
      run: ./gradlew assembleDebug --no-daemon

    - name: üìä Get version info
      id: version
      run: |
        VERSION=$(grep -oP 'versionName\s+"\K[^"]+' app/build.gradle)
        VERSION_CODE=$(grep -oP 'versionCode\s+\K[0-9]+' app/build.gradle)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "Version: $VERSION ($VERSION_CODE)"

    - name: üìÖ Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d_%H-%M')" >> $GITHUB_OUTPUT

    - name: üì± Prepare APK for distribution
      id: apk_path
      run: |
        mkdir -p releases/debug
        cp app/build/outputs/apk/debug/app-debug.apk releases/debug/
        cd releases/debug
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å –≤–µ—Ä—Å–∏–µ–π –∏ –¥–∞—Ç–æ–π
        newname="FinancialSuccess-v${{ steps.version.outputs.version }}-${{ steps.date.outputs.date }}-debug.apk"
        mv -f app-debug.apk "$newname"
        echo "path=releases/debug/$newname" >> $GITHUB_OUTPUT
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –Ω–∞ latest
        ln -sf "$newname" "latest-debug.apk"
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ APK (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
        ls -tp FinancialSuccess-v*-debug.apk | grep -v '/$' | tail -n +6 | xargs -r rm --
        
        echo "üì± APK prepared: $newname"
        ls -la

    - name: üì§ Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: FinancialSuccess-v${{ steps.version.outputs.version }}-${{ steps.date.outputs.date }}
        path: releases/debug/*.apk
        retention-days: 30

    - name: üíæ Commit APK files (only for releases)
      if: steps.should_release.outputs.value == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add releases/
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "üì± Auto-commit APK v${{ steps.version.outputs.version }} - ${{ steps.date.outputs.date }}
          
          üîß Build info:
          - Version: ${{ steps.version.outputs.version }}
          - Version Code: ${{ steps.version.outputs.version_code }}
          - Date: ${{ steps.date.outputs.date }}
          - Branch: ${{ github.ref_name }}
          - Commit: ${{ github.sha }}"
          git push
        fi

  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  screenshots-phone:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: needs.build-and-test.outputs.should_release == 'true'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì• Download APK
      uses: actions/download-artifact@v4
      with:
        name: FinancialSuccess-v${{ needs.build-and-test.outputs.version }}-${{ needs.build-and-test.outputs.date }}

    - name: üé≠ Install Maestro
      run: |
        curl -Ls "https://get.maestro.mobile.dev" | bash
        export PATH="$PATH":"$HOME/.maestro/bin"
        maestro --version

    - name: ÔøΩ Debug ADB Devices (before emulator)
      run: adb devices || true
    - name: ÔøΩüì± Start Android Emulator (Phone)
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        target: google_apis
        arch: arm64-v8a
        profile: Nexus 6
        script: |
          adb devices
          adb shell input keyevent 82
          adb shell input keyevent 82
          sleep 5
          adb devices
          adb logcat -d | tail -n 100

    - name: üì≤ Install APK on Phone Emulator
      run: |
        export PATH="$PATH":"$HOME/.maestro/bin"
        adb install releases/debug/*.apk
        adb shell pm list packages | grep financialsuccess
        sleep 3
        adb devices
        adb logcat -d | tail -n 100

    - name: üì∏ Run Maestro Screenshots (Phone)
      run: |
        export PATH="$PATH":"$HOME/.maestro/bin"
        mkdir -p screenshots/phone
        adb devices
        adb logcat -d | tail -n 100
        if [ -f "maestro/screenshots-stable.yaml" ]; then
          echo "Using stable screenshots configuration"
          maestro test maestro/screenshots-stable.yaml --verbose --format junit --output screenshots/phone/
        else
          echo "Using default screenshots configuration"
          maestro test maestro/screenshots.yaml --verbose --format junit --output screenshots/phone/
        fi
        echo "üì± Phone screenshots completed!"
        adb devices
        adb logcat -d | tail -n 100

    - name: üêû Debug ADB Devices (after screenshots)
      run: adb devices && adb logcat -d | tail -n 100

    - name: üì§ Upload Phone Screenshots
      uses: actions/upload-artifact@v4
      with:
        name: phone-screenshots-v${{ needs.build-and-test.outputs.version }}
        path: screenshots/phone/
        retention-days: 30

  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç–∞
  screenshots-tablet:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: needs.build-and-test.outputs.should_release == 'true'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì• Download APK
      uses: actions/download-artifact@v4
      with:
        name: FinancialSuccess-v${{ needs.build-and-test.outputs.version }}-${{ needs.build-and-test.outputs.date }}

    - name: üé≠ Install Maestro
      run: |
        curl -Ls "https://get.maestro.mobile.dev" | bash
        export PATH="$PATH":"$HOME/.maestro/bin"
        maestro --version

    - name: ÔøΩ Debug ADB Devices (after emulator tablet)
      run: adb devices && adb logcat -d | tail -n 100
    - name: ÔøΩüì± Start Android Emulator (Tablet)
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        target: google_apis
        arch: arm64-v8a
        profile: Nexus 10
        script: |
          adb devices
          adb shell input keyevent 82
          adb shell input keyevent 82
          sleep 5
          adb devices
          adb logcat -d | tail -n 100

    - name: üì≤ Install APK on Tablet Emulator
      run: |
        export PATH="$PATH":"$HOME/.maestro/bin"
        adb install releases/debug/*.apk
        adb shell pm list packages | grep financialsuccess
        sleep 3
        adb devices
        adb logcat -d | tail -n 100

    - name: üì∏ Run Maestro Screenshots (Tablet)
      run: |
        export PATH="$PATH":"$HOME/.maestro/bin"
        mkdir -p screenshots/tablet
        adb devices
        adb logcat -d | tail -n 100
        if [ -f "maestro/screenshots-tablet.yaml" ]; then
          echo "Using tablet screenshots configuration"
          maestro test maestro/screenshots-tablet.yaml --verbose --format junit --output screenshots/tablet/
        else
          echo "Using default screenshots configuration for tablet"
          maestro test maestro/screenshots.yaml --verbose --format junit --output screenshots/tablet/
        fi
        echo "üì± Tablet screenshots completed!"
        adb devices
        adb logcat -d | tail -n 100

    - name: üêû Debug ADB Devices (after screenshots tablet)
      run: adb devices && adb logcat -d | tail -n 100

    - name: üì§ Upload Tablet Screenshots
      uses: actions/upload-artifact@v4
      with:
        name: tablet-screenshots-v${{ needs.build-and-test.outputs.version }}
        path: screenshots/tablet/
        retention-days: 30

  # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Ä–µ–ª–∏–∑–∞
  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-test, screenshots-phone, screenshots-tablet]
    if: needs.build-and-test.outputs.should_release == 'true'
    permissions:
      contents: write

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì• Download APK
      uses: actions/download-artifact@v4
      with:
        name: FinancialSuccess-v${{ needs.build-and-test.outputs.version }}-${{ needs.build-and-test.outputs.date }}

    - name: üì• Download Phone Screenshots
      uses: actions/download-artifact@v4
      with:
        name: phone-screenshots-v${{ needs.build-and-test.outputs.version }}

    - name: üì• Download Tablet Screenshots
      uses: actions/download-artifact@v4
      with:
        name: tablet-screenshots-v${{ needs.build-and-test.outputs.version }}

    - name: üì∏ Prepare screenshots for repository
      run: |
        mkdir -p screenshots/phone screenshots/tablet
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏
        if [ -d "screenshots/phone" ]; then
          cp -r screenshots/phone/* screenshots/phone/ 2>/dev/null || true
        fi
        if [ -d "screenshots/tablet" ]; then
          cp -r screenshots/tablet/* screenshots/tablet/ 2>/dev/null || true
        fi
        
        echo "üì± Phone screenshots:"
        ls -la screenshots/phone/ 2>/dev/null || echo "No phone screenshots"
        echo ""
        echo "üì± Tablet screenshots:"
        ls -la screenshots/tablet/ 2>/dev/null || echo "No tablet screenshots"

    - name: üìù Commit Screenshots to Repository
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add screenshots/
        if git diff --staged --quiet; then
          echo "No screenshots to commit"
        else
          git commit -m "üì∏ Auto-generated screenshots v${{ needs.build-and-test.outputs.version }} - ${{ needs.build-and-test.outputs.date }}
          
          üì± Screenshots:
          - Phone: $(ls screenshots/phone/*.png 2>/dev/null | wc -l) files
          - Tablet: $(ls screenshots/tablet/*.png 2>/dev/null | wc -l) files
          - Total: $(find screenshots/ -name "*.png" 2>/dev/null | wc -l) files"
          git push
        fi

    - name: üè∑Ô∏è Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build-and-test.outputs.version }}-${{ needs.build-and-test.outputs.date }}
        name: "üéÆ Financial Success v${{ needs.build-and-test.outputs.version }}"
        body_path: RELEASE_NOTES.md
        files: |
          releases/debug/*.apk
          screenshots/phone/*.png
          screenshots/tablet/*.png
        draft: false
        prerelease: false
        generate_release_notes: false

    - name: üìä Build Summary
      run: |
        echo "üéâ Release completed successfully!"
        echo "üì± Version: ${{ needs.build-and-test.outputs.version }}"
        echo "üî¢ Version Code: ${{ needs.build-and-test.outputs.version_code }}"
        echo "üìÖ Date: ${{ needs.build-and-test.outputs.date }}"
        echo "üì∏ Screenshots generated for phone and tablet"
        echo "üì¶ APK available in releases/"