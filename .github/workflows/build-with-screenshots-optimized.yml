name: Build, Release APK and Screenshots (Optimized)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
  build-and-prepare:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_code: ${{ steps.version.outputs.version_code }}
      date: ${{ steps.date.outputs.date }}
      apk_path: ${{ steps.apk_path.outputs.path }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Bump version (auto-increment)
      id: bump_version
      run: |
        CURR_VERSION=$(grep -oP 'versionName\s+"\K[^"]+' app/build.gradle)
        CURR_CODE=$(grep -oP 'versionCode\s+\K[0-9]+' app/build.gradle)
        MAJOR=$(echo $CURR_VERSION | cut -d. -f1)
        MINOR=$(echo $CURR_VERSION | cut -d. -f2)
        if [ -z "$MINOR" ]; then MINOR=0; fi
        NEW_MINOR=$((MINOR+1))
        NEW_VERSION="$MAJOR.$NEW_MINOR"
        NEW_CODE=$((CURR_CODE+1))
        sed -i "s/versionName \"$CURR_VERSION\"/versionName \"$NEW_VERSION\"/" app/build.gradle
        sed -i "s/versionCode $CURR_CODE/versionCode $NEW_CODE/" app/build.gradle
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "new_code=$NEW_CODE" >> $GITHUB_OUTPUT
        echo "Version bumped: $CURR_VERSION ‚Üí $NEW_VERSION ($CURR_CODE ‚Üí $NEW_CODE)"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add app/build.gradle
        git commit -m "üîñ Bump version to $NEW_VERSION ($NEW_CODE) [auto]" || echo "No version change to commit"
        git push || echo "No changes to push"

    - name: Generate release notes
      id: release_notes
      run: |
        echo "## Changelog for v${{ steps.bump_version.outputs.new_version }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã:" >> RELEASE_NOTES.md
        git log -10 --pretty=format:"- %s (%an)" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### –ò–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ CHANGELOG.md:" >> RELEASE_NOTES.md
        tail -n 20 docs/CHANGELOG.md >> RELEASE_NOTES.md
        cat RELEASE_NOTES.md

    - name: Commit release notes
      run: |
        git add RELEASE_NOTES.md
        git commit -m "üìù Update release notes [auto]" || echo "No release notes change to commit"
        git push || echo "No changes to push"

    - name: Setup JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run Unit Tests
      run: ./gradlew test

    - name: Build Debug APK
      run: ./gradlew assembleDebug

    - name: Get version info
      id: version
      run: |
        VERSION=$(grep -oP 'versionName\s+"\K[^"]+' app/build.gradle)
        VERSION_CODE=$(grep -oP 'versionCode\s+\K[0-9]+' app/build.gradle)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "Version: $VERSION ($VERSION_CODE)"

    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d_%H-%M')" >> $GITHUB_OUTPUT

    - name: Prepare APK for distribution
      id: apk_path
      run: |
        mkdir -p releases/debug
        cp app/build/outputs/apk/debug/app-debug.apk releases/debug/
        cd releases/debug
        newname="FinancialSuccess-v${{ steps.version.outputs.version }}-${{ steps.date.outputs.date }}-debug.apk"
        mv -f app-debug.apk "$newname"
        echo "path=releases/debug/$newname" >> $GITHUB_OUTPUT
        ln -sf "$newname" "latest-debug.apk"
        ls -la

    - name: Clean up old APKs (keep only 3 latest)
      run: |
        cd releases/debug
        ls -tp FinancialSuccess-v*-debug.apk | grep -v '/$' | tail -n +4 | xargs -r rm --

    - name: Commit APK files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add releases/
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "üì± Auto-commit APK v${{ steps.version.outputs.version }} - ${{ steps.date.outputs.date }}"
          git push
        fi

    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: FinancialSuccess-v${{ steps.version.outputs.version }}-${{ steps.date.outputs.date }}
        path: releases/debug/*.apk

  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  screenshots-phone:
    runs-on: ubuntu-latest
    needs: build-and-prepare
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download APK
      uses: actions/download-artifact@v4
      with:
        name: FinancialSuccess-v${{ needs.build-and-prepare.outputs.version }}-${{ needs.build-and-prepare.outputs.date }}

    - name: Install Maestro
      run: |
        curl -Ls "https://get.maestro.mobile.dev" | bash
        export PATH="$PATH":"$HOME/.maestro/bin"
        maestro --version

    - name: Start Android Emulator (Phone)
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        script: |
          adb shell input keyevent 82
          adb shell input keyevent 82

    - name: Install APK on Phone Emulator
      run: |
        export PATH="$PATH":"$HOME/.maestro/bin"
        adb install releases/debug/*.apk
        adb shell pm list packages | grep financialsuccess

    - name: Run Maestro Screenshots (Phone)
      run: |
        export PATH="$PATH":"$HOME/.maestro/bin"
        mkdir -p screenshots/phone
        maestro test maestro/screenshots.yaml --format junit --output screenshots/phone/
        echo "Phone screenshots completed!"

    - name: Upload Phone Screenshots
      uses: actions/upload-artifact@v4
      with:
        name: phone-screenshots-v${{ needs.build-and-prepare.outputs.version }}
        path: screenshots/phone/

  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç–∞
  screenshots-tablet:
    runs-on: ubuntu-latest
    needs: build-and-prepare
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download APK
      uses: actions/download-artifact@v4
      with:
        name: FinancialSuccess-v${{ needs.build-and-prepare.outputs.version }}-${{ needs.build-and-prepare.outputs.date }}

    - name: Install Maestro
      run: |
        curl -Ls "https://get.maestro.mobile.dev" | bash
        export PATH="$PATH":"$HOME/.maestro/bin"
        maestro --version

    - name: Start Android Emulator (Tablet)
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        target: google_apis
        arch: x86_64
        profile: Nexus 10
        script: |
          adb shell input keyevent 82
          adb shell input keyevent 82

    - name: Install APK on Tablet Emulator
      run: |
        export PATH="$PATH":"$HOME/.maestro/bin"
        adb install releases/debug/*.apk
        adb shell pm list packages | grep financialsuccess

    - name: Run Maestro Screenshots (Tablet)
      run: |
        export PATH="$PATH":"$HOME/.maestro/bin"
        mkdir -p screenshots/tablet
        maestro test maestro/screenshots-tablet.yaml --format junit --output screenshots/tablet/
        echo "Tablet screenshots completed!"

    - name: Upload Tablet Screenshots
      uses: actions/upload-artifact@v4
      with:
        name: tablet-screenshots-v${{ needs.build-and-prepare.outputs.version }}
        path: screenshots/tablet/

  # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∏ —Ä–µ–ª–∏–∑
  final-release:
    runs-on: ubuntu-latest
    needs: [build-and-prepare, screenshots-phone, screenshots-tablet]
    permissions:
      contents: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Combine screenshots
      run: |
        mkdir -p screenshots/phone screenshots/tablet
        cp -r artifacts/phone-screenshots-v${{ needs.build-and-prepare.outputs.version }}/* screenshots/phone/ || true
        cp -r artifacts/tablet-screenshots-v${{ needs.build-and-prepare.outputs.version }}/* screenshots/tablet/ || true
        echo "üì± Phone screenshots:"
        ls -la screenshots/phone/ || echo "No phone screenshots"
        echo "üì± Tablet screenshots:"
        ls -la screenshots/tablet/ || echo "No tablet screenshots"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build-and-prepare.outputs.version }}-${{ needs.build-and-prepare.outputs.date }}
        name: "üéÆ Financial Success v${{ needs.build-and-prepare.outputs.version }}"
        body_path: RELEASE_NOTES.md
        files: |
          artifacts/FinancialSuccess-v${{ needs.build-and-prepare.outputs.version }}-${{ needs.build-and-prepare.outputs.date }}/*.apk
          screenshots/phone/*.png
          screenshots/tablet/*.png
        draft: false
        prerelease: false

    - name: Commit Screenshots to Repository
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add screenshots/
        if git diff --staged --quiet; then
          echo "No screenshots to commit"
        else
          git commit -m "üì∏ Auto-generated screenshots v${{ needs.build-and-prepare.outputs.version }} - ${{ needs.build-and-prepare.outputs.date }}"
          git push
        fi

    - name: Upload Combined Screenshots Artifact
      uses: actions/upload-artifact@v4
      with:
        name: screenshots-v${{ needs.build-and-prepare.outputs.version }}
        path: screenshots/