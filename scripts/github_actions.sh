#!/usr/bin/env bash
set -e

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
if [ -f "../config.env" ]; then
    source ../config.env
elif [ -f "config.env" ]; then
    source config.env
else
    echo "–û—à–∏–±–∫–∞: –§–∞–π–ª config.env –Ω–µ –Ω–∞–π–¥–µ–Ω!" >&2
    exit 1
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è gh CLI
export GH_TOKEN="$GITHUB_TOKEN"
# –û—Ç–∫–ª—é—á–∞–µ–º pager –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
unset PAGER

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub Actions
list_workflows() {
    echo "==== –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö workflows ===="
    gh workflow list
}

run_workflow() {
    local workflow_name="$1"
    if [ -z "$workflow_name" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 run <workflow_name>" >&2
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ workflows:" >&2
        gh workflow list
        exit 1
    fi
    
    echo "==== –ó–∞–ø—É—Å–∫ workflow: $workflow_name ===="
    gh workflow run "$workflow_name"
}

list_runs() {
    local workflow_name="$1"
    local limit="${2:-10}"
    
    if [ -n "$workflow_name" ]; then
        echo "==== –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏ workflow: $workflow_name ===="
        gh run list --workflow="$workflow_name" --limit "$limit"
    else
        echo "==== –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏ –≤—Å–µ—Ö workflows ===="
        gh run list --limit "$limit"
    fi
}

check_status() {
    local run_id="$1"
    if [ -z "$run_id" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 status <run_id>" >&2
        exit 1
    fi
    
    echo "==== –°—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞: $run_id ===="
    gh run view "$run_id"
}

get_logs() {
    local run_id="$1"
    local job_id="$2"
    
    if [ -z "$run_id" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 logs <run_id> [job_id]" >&2
        exit 1
    fi
    
    if [ -n "$job_id" ]; then
        echo "==== –õ–æ–≥–∏ job $job_id –≤ run $run_id ===="
        gh run view --log --job="$job_id"
    else
        echo "==== –õ–æ–≥–∏ run $run_id ===="
        gh run view --log "$run_id"
    fi
}

get_failed_logs() {
    local run_id="$1"
    if [ -z "$run_id" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 failed-logs <run_id>" >&2
        exit 1
    fi
    
    echo "==== –õ–æ–≥–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö job'–æ–≤ –≤ run $run_id ===="
    gh run view --log-failed "$run_id"
}

monitor_run() {
    local run_id="$1"
    local max_attempts="${2:-60}"
    local delay="${3:-30}"
    
    if [ -z "$run_id" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 monitor <run_id> [max_attempts] [delay_seconds]" >&2
        exit 1
    fi
    
    echo "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ run: $run_id"
    echo "‚è±Ô∏è  –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: $max_attempts, –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${delay}—Å"
    echo ""
    
    for ((i=1; i<=max_attempts; i++)); do
        echo "üìä –ü–æ–ø—ã—Ç–∫–∞ $i/$max_attempts..."
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        local status=$(gh run view "$run_id" --json status,conclusion --jq '.[0].status')
        local conclusion=$(gh run view "$run_id" --json status,conclusion --jq '.[0].conclusion // "running"')
        
        echo "   –°—Ç–∞—Ç—É—Å: $status"
        echo "   –†–µ–∑—É–ª—å—Ç–∞—Ç: $conclusion"
        
        if [ "$status" = "completed" ]; then
            if [ "$conclusion" = "success" ]; then
                echo "‚úÖ Workflow —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
                return 0
            else
                echo "‚ùå Workflow –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: $conclusion"
                return 1
            fi
        fi
        
        if [ $i -lt $max_attempts ]; then
            echo "   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}—Å..."
            sleep "$delay"
        fi
    done
    
    echo "‚è∞ –ü–†–ï–í–´–®–ï–ù–û –í–†–ï–ú–Ø –û–ñ–ò–î–ê–ù–ò–Ø!"
    return 1
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-help}" in
    "list")
        list_workflows
        ;;
    "run")
        run_workflow "$2"
        ;;
    "runs")
        list_runs "$2" "$3"
        ;;
    "status")
        check_status "$2"
        ;;
    "logs")
        get_logs "$2" "$3"
        ;;
    "failed-logs")
        get_failed_logs "$2"
        ;;
    "monitor")
        monitor_run "$2" "$3" "$4"
        ;;
    "help"|*)
        echo "GitHub Actions CLI Tool"
        echo ""
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <–∫–æ–º–∞–Ω–¥–∞> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  list                    - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö workflows"
        echo "  run <workflow_name>     - –ó–∞–ø—É—Å–∫ workflow"
        echo "  runs [workflow_name] [limit] - –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤"
        echo "  status <run_id>         - –°—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"
        echo "  logs <run_id> [job_id]  - –õ–æ–≥–∏ –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ job'–∞"
        echo "  failed-logs <run_id>    - –õ–æ–≥–∏ —Ç–æ–ª—å–∫–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö job'–æ–≤"
        echo "  monitor <run_id> [max_attempts] [delay] - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å–∫–∞"
        echo "  help                    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo ""
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  $0 list"
        echo "  $0 run 'stable-build.yml'"
        echo "  $0 runs 'stable-build.yml' 5"
        echo "  $0 status 123456789"
        echo "  $0 monitor 123456789 30 60"
        ;;
esac