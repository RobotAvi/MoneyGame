#!/usr/bin/env bash
set -e

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
if [ -f "../config.env" ]; then
    source ../config.env
elif [ -f "config.env" ]; then
    source config.env
else
    echo "–û—à–∏–±–∫–∞: –§–∞–π–ª config.env –Ω–µ –Ω–∞–π–¥–µ–Ω!" >&2
    exit 1
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è gh CLI
export GH_TOKEN="$GITHUB_TOKEN"
# –û—Ç–∫–ª—é—á–∞–µ–º pager –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
unset PAGER

echo "üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º GitHub Actions"
echo "=================================="
echo ""

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏
echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏ workflow 'üöÄ Stable Build & Release':"
echo ""

runs=$(gh run list --workflow="üöÄ Stable Build & Release" --limit 5 --json databaseId,status,conclusion,createdAt,url)

echo "$runs" | jq -r '.[] | "ID: \(.databaseId) | –°—Ç–∞—Ç—É—Å: \(.status) | –†–µ–∑—É–ª—å—Ç–∞—Ç: \(.conclusion // "running") | –í—Ä–µ–º—è: \(.createdAt)"'
echo ""

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—É—Å–∫
latest_failed=$(echo "$runs" | jq -r '.[] | select(.conclusion == "failure") | .databaseId' | head -1)

if [ -n "$latest_failed" ]; then
    echo "üîç –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: $latest_failed"
    echo "=================================================="
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ job'–∞—Ö
    run_info=$(gh run view "$latest_failed" --json jobs,status,conclusion)
    
    echo ""
    echo "üìä –°—Ç–∞—Ç—É—Å job'–æ–≤:"
    echo "$run_info" | jq -r '.jobs[] | "   \(.name): \(.status) \(.conclusion // "")"'
    echo ""
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ job'—ã
    failed_jobs=$(echo "$run_info" | jq -r '.jobs[] | select(.conclusion == "failure") | .name')
    
    if [ -n "$failed_jobs" ]; then
        echo "‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ job'—ã:"
        echo "$failed_jobs" | while read job_name; do
            echo "   - $job_name"
        done
        echo ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        if echo "$failed_jobs" | grep -q "screenshots"; then
            echo "‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –û—à–∏–±–∫–∏ –≤ job'–∞—Ö screenshots"
            echo "=========================================="
            echo ""
            echo "üîç –ü—Ä–∏—á–∏–Ω–∞: Android —ç–º—É–ª—è—Ç–æ—Ä –Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è"
            echo ""
            echo "üìã –°–∏–º–ø—Ç–æ–º—ã:"
            echo "   - –≠–º—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –Ω–æ Android –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∑–∞ 180 —Å–µ–∫—É–Ω–¥"
            echo "   - –û—à–∏–±–∫–∏ 'adb shell getprop failed'"
            echo "   - –ü—Ä–æ—Ü–µ—Å—Å —ç–º—É–ª—è—Ç–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            echo ""
            echo "üí° –†–ï–®–ï–ù–ò–Ø:"
            echo ""
            echo "1. üîß –£–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ workflow:"
            echo "   - –ù–∞–π–¥–∏—Ç–µ –≤ .github/workflows/stable-build.yml"
            echo "   - –£–≤–µ–ª–∏—á—å—Ç–µ timeout –¥–ª—è job'–æ–≤ screenshots"
            echo "   - –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ screenshots"
            echo ""
            echo "2. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ build –±–µ–∑ screenshots:"
            echo "   - –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π workflow —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–±–æ—Ä–∫–∏"
            echo "   - –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ screenshots"
            echo ""
            echo "3. ‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º—É–ª—è—Ç–æ—Ä:"
            echo "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ª–µ–≥–∫–∏–π —ç–º—É–ª—è—Ç–æ—Ä"
            echo "   - –î–æ–±–∞–≤–∏—Ç—å –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ"
            echo "   - –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞"
            echo ""
            echo "4. üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:"
            echo "   - Firebase Test Lab"
            echo "   - BrowserStack"
            echo "   - –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –±–µ–∑ —ç–º—É–ª—è—Ç–æ—Ä–∞"
            echo ""
        fi
        
        if echo "$failed_jobs" | grep -q "build"; then
            echo "‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –û—à–∏–±–∫–∏ –≤ job'–∞—Ö —Å–±–æ—Ä–∫–∏"
            echo "====================================="
            echo ""
            echo "üîç –ü—Ä–∏—á–∏–Ω–∞: –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–∏–ª—è—Ü–∏–µ–π –∏–ª–∏ —Ç–µ—Å—Ç–∞–º–∏"
            echo ""
            echo "üí° –†–ï–®–ï–ù–ò–Ø:"
            echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏: ./github_actions.sh logs $latest_failed"
            echo "2. –û–±–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
            echo "3. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ"
            echo ""
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ job'—ã
    successful_jobs=$(echo "$run_info" | jq -r '.jobs[] | select(.conclusion == "success") | .name')
    
    if [ -n "$successful_jobs" ]; then
        echo "‚úÖ –£—Å–ø–µ—à–Ω—ã–µ job'—ã:"
        echo "$successful_jobs" | while read job_name; do
            echo "   - $job_name"
        done
        echo ""
        
        # –ï—Å–ª–∏ build –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, –Ω–æ screenshots —É–ø–∞–ª–∏
        if echo "$successful_jobs" | grep -q "build-and-test" && echo "$failed_jobs" | grep -q "screenshots"; then
            echo "üéâ –•–û–†–û–®–ò–ï –ù–û–í–û–°–¢–ò!"
            echo "=================="
            echo "‚úÖ –°–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
            echo "üì¶ APK —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
            echo ""
            echo "üîó –°–∫–∞—á–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:"
            echo "   https://github.com/RobotAvi/MoneyGame/actions/runs/$latest_failed"
            echo ""
            echo "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:"
            echo "   –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Å–±–æ—Ä–∫—É, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –ø—Ä–æ–±–ª–µ–º—ã —Å screenshots"
            echo ""
        fi
    fi
else
    echo "‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –ø–æ–ø—ã—Ç–∫–∞—Ö"
fi

echo "üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò"
echo "==============================="
echo ""
echo "1. üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
echo "   ./monitor_workflows.sh"
echo ""
echo "2. üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:"
echo "   ./github_actions.sh failed-logs <run_id>"
echo ""
echo "3. üöÄ –£–º–Ω—ã–π –∑–∞–ø—É—Å–∫:"
echo "   ./smart_run.sh 'üöÄ Stable Build & Release'"
echo ""
echo "4. üîß –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ workflow:"
echo "   - –°–æ–∑–¥–∞–π—Ç–µ workflow —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–±–æ—Ä–∫–∏"
echo "   - –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ job'–æ–≤"
echo ""
echo "5. üìù –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
echo "   - –û–±–Ω–æ–≤–∏—Ç–µ README —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º"
echo "   - –î–æ–±–∞–≤—å—Ç–µ troubleshooting guide"
echo ""

echo "üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò"
echo "=================="
echo ""
echo "1. üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ workflow –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö job'–æ–≤"
echo "2. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π workflow"
echo "3. ‚úÖ –î–æ–±–µ–π—Ç–µ—Å—å –∑–µ–ª–µ–Ω–æ–π —Å–±–æ—Ä–∫–∏"
echo "4. üìù –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è"
echo ""