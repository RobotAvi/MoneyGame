package com.financialsuccess.game

import android.os.Bundle
import android.view.View
import android.widget.ImageView
import android.widget.LinearLayout
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import com.financialsuccess.game.adapters.AssetAdapter
import com.financialsuccess.game.data.GameDataManager
import com.financialsuccess.game.databinding.ActivityGameBinding
import com.financialsuccess.game.models.*
import java.text.NumberFormat
import java.util.*
import android.widget.Toast

class GameActivity : AppCompatActivity() {
    
    private lateinit var binding: ActivityGameBinding
    private lateinit var gameManager: GameManager
    private var currentGameState: GameState? = null
    
    private val currencyFormat = NumberFormat.getCurrencyInstance(Locale("ru", "RU"))
    
    private var lastDiceValue: Int? = null
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityGameBinding.inflate(layoutInflater)
        setContentView(binding.root)
        
        initGame()
        setupUI()
    }
    
    private fun initGame() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –≥–æ—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫
        val player = intent.getParcelableExtra("player", Player::class.java)
        
        if (player != null) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            gameManager = GameManager()
            currentGameState = gameManager.startNewGameWithPlayer(player)
            updateUI()
        } else {
            // –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± - —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            val profession = intent.getParcelableExtra("profession", Profession::class.java)
            val dream = intent.getParcelableExtra("dream", Dream::class.java)
            val playerAge = intent.getIntExtra("playerAge", 25)
            val playerName = intent.getStringExtra("playerName")
            val startDateMillis = intent.getLongExtra("startDate", 0L).takeIf { it != 0L }
            
            if (profession != null && dream != null) {
                gameManager = GameManager()
                currentGameState = gameManager.startNewGame(
                    profession,
                    dream,
                    playerAge,
                    playerName,
                    startDateMillis
                )
                updateUI()
            } else {
                finish()
            }
        }
    }
    
    private fun setupUI() {
        // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ —Å –∫—É–±–∏–∫–æ–º
        binding.cardDice.setOnClickListener {
            rollDiceAndMove()
        }
        
        binding.btnFinancialStatement.setOnClickListener {
            if (!binding.btnFinancialStatement.isEnabled) {
                Toast.makeText(this, "–ö–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –æ—Ç—á–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            showFinancialStatement()
        }
        
        binding.btnAssets.setOnClickListener {
            if (!binding.btnAssets.isEnabled) {
                Toast.makeText(this, "–ö–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –∞–∫—Ç–∏–≤—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            showAssets()
        }
        
        binding.btnMarket.setOnClickListener {
            if (!binding.btnMarket.isEnabled) {
                Toast.makeText(this, "–ö–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: —Ä—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            showMarket()
        }
        
        binding.btnFinancialJournal.setOnClickListener {
            if (!binding.btnFinancialJournal.isEnabled) {
                Toast.makeText(this, "–ö–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –∂—É—Ä–Ω–∞–ª –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            showFinancialJournal()
        }
        
        binding.btnHealthStatus.setOnClickListener {
            if (!binding.btnHealthStatus.isEnabled) {
                Toast.makeText(this, "–ö–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –∑–¥–æ—Ä–æ–≤—å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            showHealthStatus()
        }
        
        // –î–µ–ª–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º
        binding.tvAge.setOnClickListener {
            showAgeStatistics()
        }
        
        setupAssetsRecyclerView()
    }
    
    private fun rollDiceAndMove() {
        val diceValue = gameManager.rollDice()
        lastDiceValue = diceValue
        val player = currentGameState?.player ?: return
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–±–∏–∫–∞
        val diceRes = when (diceValue) {
            1 -> R.drawable.dice_1
            2 -> R.drawable.dice_2
            3 -> R.drawable.dice_3
            4 -> R.drawable.dice_4
            5 -> R.drawable.dice_5
            6 -> R.drawable.dice_6
            else -> R.drawable.dice_1
        }
        
        try {
            val diceField = binding.javaClass.getDeclaredField("ivDice")
            val imageView = diceField.get(binding) as? android.widget.ImageView
            imageView?.setBackgroundResource(diceRes)
        } catch (e: Exception) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
        binding.tvDiceValue.text = "–í—ã–ø–∞–ª–æ $diceValue. –ë—Ä–æ—Å–∞–π –µ—â–µ!"
        
        if (player.isInFastTrack) {
            handleFastTrackDice(diceValue)
        } else {
            val oldPosition = currentGameState?.player?.position ?: 0
            currentGameState = gameManager.movePlayer(diceValue)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø–æ–ª–Ω—ã–π –∫—Ä—É–≥
            val passedStart = (oldPosition + diceValue) >= 24
            if (passedStart) {
                showMessage("üíº –ó–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${currencyFormat.format(currentGameState?.player?.salary ?: 0)}")
            }
            
            updateUI()
            handlePositionEvent()
        }
    }
    
    private fun handleFastTrackDice(diceValue: Int) {
        val player = currentGameState?.player ?: return
        val dreamNumber = player.dream.fastTrackNumber
        
        binding.tvDiceValue.text = "–†–µ–∑—É–ª—å—Ç–∞—Ç: $diceValue (–ù—É–∂–Ω–æ: ${dreamNumber})"
        
        if (diceValue == dreamNumber) {
            // –ü–æ–ø–∞–ª –Ω–∞ –º–µ—á—Ç—É!
            if (player.cash >= player.dream.cost) {
                // –ú–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å –º–µ—á—Ç—É - –ø–æ–±–µ–¥–∞!
                showVictoryDialog()
            } else {
                // –ü–æ–ø–∞–ª, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥
                val needed = player.dream.cost - player.cash
                showMessage("üéØ –í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ —Å–≤–æ—é –º–µ—á—Ç—É!\n\n–û–¥–Ω–∞–∫–æ –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${currencyFormat.format(needed)} –¥–ª—è –µ—ë –ø–æ–∫—É–ø–∫–∏.\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏!")
                
                // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ –∑–∞ —Ö–æ–¥
                player.cash += player.getCashFlow()
                updateUI()
            }
        } else {
            // –ù–µ –ø–æ–ø–∞–ª –Ω–∞ –º–µ—á—Ç—É
            val messages = listOf(
                "üé≤ –ú–∏–º–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                "üéØ –ü–æ—á—Ç–∏ –ø–æ–ø–∞–ª–∏! –°–ª–µ–¥—É—é—â–∏–π –±—Ä–æ—Å–æ–∫ –±—É–¥–µ—Ç —É–¥–∞—á–Ω–µ–µ.",
                "üí™ –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å! –í–∞—à–∞ –º–µ—á—Ç–∞ –±–ª–∏–∑–∫–æ.",
                "üìà –í—Ä–µ–º—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –∏ –∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏!",
                "üöÄ –ö–∞–∂–¥—ã–π –±—Ä–æ—Å–æ–∫ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ü–µ–ª–∏!"
            )
            showMessage(messages.random())
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ –∑–∞ —Ö–æ–¥
            player.cash += player.getCashFlow()
            
            // –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–æ—Ä–æ–∂–∫–µ
            if (diceValue == 1 || diceValue == 6) {
                handleFastTrackEvent()
            }
            
            updateUI()
        }
    }
    
    private fun handleFastTrackEvent() {
        val events = listOf(
            "üí∞ –î–∏–≤–∏–¥–µ–Ω–¥—ã –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: +50,000‚ÇΩ" to 50000,
            "üìà –£–¥–∞—á–Ω–∞—è —Å–¥–µ–ª–∫–∞: +100,000‚ÇΩ" to 100000, 
            "üéÅ –ë–æ–Ω—É—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: +25,000‚ÇΩ" to 25000,
            "üíé –†–æ—Å—Ç –∞–∫—Ü–∏–π: +75,000‚ÇΩ" to 75000,
            "üèÜ –ü—Ä–µ–º–∏—è –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: +30,000‚ÇΩ" to 30000
        )
        
        val (message, amount) = events.random()
        currentGameState?.player?.cash = (currentGameState?.player?.cash ?: 0) + amount
        showMessage(message)
    }
    
    private fun showVictoryDialog() {
        val player = currentGameState?.player ?: return
        
        AlertDialog.Builder(this)
            .setTitle("üéâ –ü–û–ë–ï–î–ê!")
            .setMessage("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–π –º–µ—á—Ç—ã: ${player.dream.name}!\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∫—Ä—ã—Å–∏–Ω—ã—Ö –±–µ–≥–æ–≤ –∏ –æ—Å—É—â–µ—Å—Ç–≤–∏–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –º–µ—á—Ç—É!\n\n–ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${currencyFormat.format(player.cash)}\n–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: ${currencyFormat.format(player.passiveIncome)}")
            .setPositiveButton("üéä –ù–æ–≤–∞—è –∏–≥—Ä–∞") { _, _ ->
                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
                finish()
            }
            .setNegativeButton("üìä –ò—Ç–æ–≥–∏") { _, _ ->
                showFinalStats()
            }
            .setCancelable(false)
            .show()
    }
    
    private fun showFinalStats() {
        val player = currentGameState?.player ?: return
        
        val message = """
            üèÜ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
            
            üéØ –ú–µ—á—Ç–∞: ${player.dream.name}
            üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${currencyFormat.format(player.cash)}
            üìä –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: ${currencyFormat.format(player.passiveIncome)}
            üè† –ê–∫—Ç–∏–≤–æ–≤: ${player.assets.size}
            üíº –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: ${player.investments.size}
            üí≥ –ß–∏—Å—Ç–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${currencyFormat.format(player.getNetWorth())}
            
            üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—É—Ç—å –æ—Ç –∫—Ä—ã—Å–∏–Ω—ã—Ö –±–µ–≥–æ–≤ –¥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥—ã!
        """.trimIndent()
        
        AlertDialog.Builder(this)
            .setTitle("üìä –ò—Ç–æ–≥–∏ –∏–≥—Ä—ã")
            .setMessage(message)
            .setPositiveButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞") { _, _ ->
                finish()
            }
            .show()
    }
    
    private fun handlePositionEvent() {
        val position = currentGameState?.player?.position ?: return
        
        when (position % 6) {
            0 -> showSmallDeal()
            1 -> showBonusEvent() // –ó–∞–º–µ–Ω—è–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –Ω–∞ –±–æ–Ω—É—Å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            2 -> showMarketEvent()
            3 -> showBigDeal()
            4 -> showDoodadEvent()
            5 -> showCharityEvent()
        }
    }
    
    private fun showSmallDeal() {
        val deals = GameDataManager.getSmallDeals()
        val deal = deals.random()
        
        AlertDialog.Builder(this)
            .setTitle("–ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞")
            .setMessage("${deal.name}\n–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: ${currencyFormat.format(deal.downPayment)}\n–î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫: +${currencyFormat.format(deal.cashFlow)}/–º–µ—Å")
            .setPositiveButton("–ö—É–ø–∏—Ç—å") { _, _ ->
                if (gameManager.buyAsset(deal)) {
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –∞–∫—Ç–∏–≤–∞ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è)
                    currentGameState?.player?.addFinancialEntry(
                        FinancialEntryType.EXPENSE,
                        FinancialCategory.ASSET_PURCHASE,
                        -deal.downPayment,
                        "–ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞: ${deal.name} (–¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫: +${currencyFormat.format(deal.cashFlow)}/–º–µ—Å)"
                    )
                    updateUI()
                    showMessage("–ê–∫—Ç–∏–≤ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω!")
                } else {
                    showMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                }
            }
            .setNegativeButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", null)
            .show()
    }
    
    private fun showBigDeal() {
        val deals = GameDataManager.getBigDeals()
        val deal = deals.random()
        
        AlertDialog.Builder(this)
            .setTitle("–ö—Ä—É–ø–Ω–∞—è —Å–¥–µ–ª–∫–∞")
            .setMessage("${deal.name}\n–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: ${currencyFormat.format(deal.downPayment)}\n–î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫: +${currencyFormat.format(deal.cashFlow)}/–º–µ—Å")
            .setPositiveButton("–ö—É–ø–∏—Ç—å") { _, _ ->
                if (gameManager.buyAsset(deal)) {
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –∞–∫—Ç–∏–≤–∞ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è)
                    currentGameState?.player?.addFinancialEntry(
                        FinancialEntryType.EXPENSE,
                        FinancialCategory.ASSET_PURCHASE,
                        -deal.downPayment,
                        "–ö—Ä—É–ø–Ω–∞—è —Å–¥–µ–ª–∫–∞: ${deal.name} (–¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫: +${currencyFormat.format(deal.cashFlow)}/–º–µ—Å)"
                    )
                    updateUI()
                    showMessage("–ê–∫—Ç–∏–≤ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω!")
                } else {
                    showMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                }
            }
            .setNegativeButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", null)
            .show()
    }
    
    private fun showPaycheck() {
        currentGameState?.player?.let { player ->
            player.cash += player.salary
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
            player.logIncome(
                FinancialCategory.SALARY,
                player.salary,
                "–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ ${player.profession.name}"
            )
            
            updateUI()
            showMessage("–ó–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${currencyFormat.format(player.salary)}")
        }
    }
    
    private fun showBonusEvent() {
        val bonuses = listOf(
            "–ü—Ä–µ–º–∏—è –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É" to 3000,
            "–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–æ–µ–∫—Ç" to 5000,
            "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É" to 2000,
            "–î–æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ" to 4000,
            "–ë–æ–Ω—É—Å –∑–∞ —ç–∫–æ–Ω–æ–º–∏—é" to 2500
        )
        
        val (bonusName, bonusAmount) = bonuses.random()
        
        currentGameState?.player?.let { player ->
            player.cash += bonusAmount
            player.logIncome(
                FinancialCategory.BONUS,
                bonusAmount,
                bonusName
            )
            updateUI()
            showMessage("üéÅ $bonusName: +${currencyFormat.format(bonusAmount)}")
        }
    }
    
    private fun showMarketEvent() {
        val event = GameDataManager.getRandomEvent()
        
        // –†–∏—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ processMonthlyOperations, –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        when {
            event.contains("—Ä–µ–±—ë–Ω–æ–∫") -> {
                currentGameState?.player?.let { player ->
                    player.addChild()
                    player.logExpense(
                        FinancialCategory.CHILDREN,
                        8000,
                        "–†–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã 8000‚ÇΩ/–º–µ—Å"
                    )
                    updateUI()
                }
            }
            event.contains("–ü–æ–≤—ã—à–µ–Ω–∏–µ") -> {
                currentGameState?.player?.let { player ->
                    val bonus = 5000
                    player.salary += bonus
                    player.updateTotalIncome()
                    player.logIncome(
                        FinancialCategory.BONUS,
                        bonus,
                        "–ü–æ–≤—ã—à–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–∞ ${currencyFormat.format(bonus)}"
                    )
                    updateUI()
                }
            }
            event.contains("–ù–∞–ª–æ–≥–æ–≤–∞—è") -> {
                currentGameState?.player?.let { player ->
                    val taxAmount = 15000
                    player.logExpense(
                        FinancialCategory.TAXES,
                        taxAmount,
                        "–î–æ–ø–ª–∞—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–æ–≤–µ—Ä–∫–∏"
                    )
                    updateUI()
                }
            }
            event.contains("–ù–∞—Å–ª–µ–¥—Å—Ç–≤–æ") -> {
                currentGameState?.player?.let { player ->
                    val inheritanceAmount = 100000
                    player.cash += inheritanceAmount
                    player.logIncome(
                        FinancialCategory.INHERITANCE,
                        inheritanceAmount,
                        "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ –æ—Ç –¥–∞–ª—å–Ω–µ–≥–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞"
                    )
                    updateUI()
                }
            }
        }
        
        showMessage("üé≤ $event")
    }
    
    private fun showDoodadEvent() {
        val expenses = listOf(5000, 10000, 15000, 20000, 25000)
        val expense = expenses.random()
        
        val expenseReasons = listOf(
            "–ü–æ–ª–æ–º–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
            "–°—Ä–æ—á–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏", 
            "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã",
            "–®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ü–î–î",
            "–ü–æ–ª–æ–º–∫–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞"
        )
        
        currentGameState?.player?.let { player ->
            player.logExpense(
                FinancialCategory.EMERGENCY,
                expense,
                expenseReasons.random()
            )
            updateUI()
            showMessage("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: ${currencyFormat.format(expense)}")
        }
    }
    
    private fun showCharityEvent() {
        AlertDialog.Builder(this)
            .setTitle("–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            .setMessage("–•–æ—Ç–∏—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å 10% –æ—Ç –≤–∞—à–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –Ω–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å?")
            .setPositiveButton("–î–∞") { _, _ ->
                currentGameState?.player?.let { player ->
                    val donation = (player.totalIncome * 0.1).toInt()
                    player.logExpense(
                        FinancialCategory.CHARITY,
                        donation,
                        "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (10% –æ—Ç –¥–æ—Ö–æ–¥–∞)"
                    )
                    updateUI()
                    showMessage("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ: ${currencyFormat.format(donation)}")
                }
            }
            .setNegativeButton("–ù–µ—Ç", null)
            .show()
    }
    
    private fun showFinancialStatement() {
        currentGameState?.player?.let { player ->
            val message = """
                üí∞ –î–û–•–û–î–´:
                –ó–∞—Ä–ø–ª–∞—Ç–∞: ${currencyFormat.format(player.totalIncome)}
                –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: ${currencyFormat.format(player.passiveIncome)}
                –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${currencyFormat.format(player.totalIncome + player.passiveIncome)}
                
                üí∏ –†–ê–°–•–û–î–´:
                –ï–¥–∞: ${currencyFormat.format(player.foodExpenses)}
                –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${currencyFormat.format(player.transportExpenses)} 
                –ñ–∏–ª—å—ë: ${currencyFormat.format(player.housingExpenses)}
                –î–µ—Ç–∏: ${currencyFormat.format(player.childrenExpenses)}
                –ù–∞–ª–æ–≥–∏: ${currencyFormat.format(player.taxes)}
                –ü—Ä–æ—á–µ–µ: ${currencyFormat.format(player.otherExpenses)}
                –ö—Ä–µ–¥–∏—Ç—ã: ${currencyFormat.format(player.liabilities.sumOf { it.payment })}
                –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${currencyFormat.format(player.totalExpenses)}
                
                üìä –ò–¢–û–ì–û:
                –ù–∞–ª–∏—á–Ω—ã–µ: ${currencyFormat.format(player.cash)}
                –î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫: ${currencyFormat.format(player.getCashFlow())}
                –ß–∏—Å—Ç–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${currencyFormat.format(player.getNetWorth())}
                –ê–∫—Ç–∏–≤—ã: ${player.assets.size} —à—Ç.
                
                ${if (player.canEscapeRatRace()) "üéâ –ì–æ—Ç–æ–≤ –∫ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–æ—Ä–æ–∂–∫–µ!" else "üí™ –£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥"}
            """.trimIndent()
            
            AlertDialog.Builder(this)
                .setTitle("üìã –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç")
                .setMessage(message)
                .setPositiveButton("OK", null)
                .show()
        }
    }
    
    private fun showAssets() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤ –∏–≥—Ä–æ–∫–∞
        binding.recyclerViewAssets.visibility = 
            if (binding.recyclerViewAssets.visibility == View.VISIBLE) View.GONE else View.VISIBLE
    }
    
    private fun showMarket() {
        val items = arrayOf("üìà –ê–∫—Ç–∏–≤—ã", "üíº –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å")
        
        AlertDialog.Builder(this)
            .setTitle("üè™ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä—ã–Ω–æ–∫")
            .setItems(items) { _, which ->
                when (which) {
                    0 -> showAvailableAssets()
                    1 -> showAvailableInvestments()
                    2 -> showPortfolio()
                }
            }
            .show()
    }
    
    private fun showAvailableAssets() {
        val smallDeals = GameDataManager.getSmallDeals()
        val bigDeals = GameDataManager.getBigDeals()
        val allDeals = smallDeals + bigDeals
        
        val names = allDeals.map { "${it.name} - ${currencyFormat.format(it.downPayment)}" }.toTypedArray()
        
        AlertDialog.Builder(this)
            .setTitle("üìà –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã")
            .setItems(names) { _, which ->
                val asset = allDeals[which]
                showAssetDetails(asset)
            }
            .show()
    }
    
    private fun showAvailableInvestments() {
        val investments = GameDataManager.getInvestments()
        val names = investments.map { 
            "${it.name} - ${currencyFormat.format(it.cost)} (${getRiskText(it.riskLevel)})"
        }.toTypedArray()
        
        AlertDialog.Builder(this)
            .setTitle("üíº –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            .setItems(names) { _, which ->
                val investment = investments[which]
                showInvestmentDetails(investment)
            }
            .show()
    }
    
    private fun showAssetDetails(asset: Asset) {
        val roi = if (asset.downPayment > 0) {
            (asset.cashFlow * 12.0 / asset.downPayment) * 100
        } else 0.0
        
        val message = """
            ${asset.name}
            
            –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: ${currencyFormat.format(asset.downPayment)}
            –°—Ç–æ–∏–º–æ—Å—Ç—å: ${currencyFormat.format(asset.value)}
            –î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫: +${currencyFormat.format(asset.cashFlow)}/–º–µ—Å
            ROI: ${String.format("%.1f", roi)}% –≥–æ–¥–æ–≤—ã—Ö
            
            ${if (asset.loan > 0) "–ö—Ä–µ–¥–∏—Ç: ${currencyFormat.format(asset.loan)} (${currencyFormat.format(asset.loanPayment)}/–º–µ—Å)" else "–ë–µ–∑ –∫—Ä–µ–¥–∏—Ç–∞"}
        """.trimIndent()
        
        AlertDialog.Builder(this)
            .setTitle("üìä –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–∞")
            .setMessage(message)
            .setPositiveButton("üí∞ –ö—É–ø–∏—Ç—å") { _, _ ->
                if (gameManager.buyAsset(asset)) {
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –∞–∫—Ç–∏–≤–∞
                    currentGameState?.player?.logExpense(
                        FinancialCategory.ASSET_PURCHASE,
                        asset.downPayment,
                        "–ü–æ–∫—É–ø–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–µ: ${asset.name} (–¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫: +${currencyFormat.format(asset.cashFlow)}/–º–µ—Å)"
                    )
                    updateUI()
                    showMessage("‚úÖ –ê–∫—Ç–∏–≤ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω!")
                } else {
                    showMessage("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                }
            }
            .setNegativeButton("‚ùå –û—Ç–º–µ–Ω–∞", null)
            .show()
    }
    
    private fun showInvestmentDetails(investment: Investment) {
        val roi = if (investment.cost > 0) {
            (investment.expectedReturn * 12.0 / investment.cost) * 100
        } else 0.0
        
        val message = """
            ${investment.name}
            
            –°—Ç–æ–∏–º–æ—Å—Ç—å: ${currencyFormat.format(investment.cost)}
            –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${currencyFormat.format(investment.expectedReturn)}/–º–µ—Å
            ROI: ${String.format("%.1f", roi)}% –≥–æ–¥–æ–≤—ã—Ö
            –†–∏—Å–∫: ${getRiskText(investment.riskLevel)}
        """.trimIndent()
        
        AlertDialog.Builder(this)
            .setTitle("üíº –î–µ—Ç–∞–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
            .setMessage(message)
            .setPositiveButton("üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å") { _, _ ->
                currentGameState?.player?.let { player ->
                    if (player.cash >= investment.cost) {
                        player.investments.add(investment)
                        
                        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é
                        player.logExpense(
                            FinancialCategory.INVESTMENT,
                            investment.cost,
                            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: ${investment.name} (–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: +${currencyFormat.format(investment.expectedReturn)}/–º–µ—Å)"
                        )
                        
                        updateUI()
                        showMessage("‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!")
                    } else {
                        showMessage("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                    }
                }
            }
            .setNegativeButton("‚ùå –û—Ç–º–µ–Ω–∞", null)
            .show()
    }
    
    private fun showPortfolio() {
        currentGameState?.player?.let { player ->
            val message = """
                üìà –ê–ö–¢–ò–í–´ (${player.assets.size} —à—Ç.):
                ${player.assets.joinToString("\n") { "‚Ä¢ ${it.name}: +${currencyFormat.format(it.cashFlow)}/–º–µ—Å" }}
                
                üíº –ò–ù–í–ï–°–¢–ò–¶–ò–ò (${player.investments.size} —à—Ç.):
                ${player.investments.joinToString("\n") { "‚Ä¢ ${it.name}: +${currencyFormat.format(it.expectedReturn)}/–º–µ—Å" }}
                
                üìä –û–ë–©–ò–ô –ü–ê–°–°–ò–í–ù–´–ô –î–û–•–û–î:
                ${currencyFormat.format(player.passiveIncome + player.investments.sumOf { it.expectedReturn })}
            """.trimIndent()
            
            AlertDialog.Builder(this)
                .setTitle("üìä –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å")
                .setMessage(message)
                .setPositiveButton("OK", null)
                .show()
        }
    }
    
    private fun getRiskText(risk: RiskLevel): String = when (risk) {
        RiskLevel.LOW -> "üü¢ –ù–∏–∑–∫–∏–π"
        RiskLevel.MEDIUM -> "üü° –°—Ä–µ–¥–Ω–∏–π" 
        RiskLevel.HIGH -> "üî¥ –í—ã—Å–æ–∫–∏–π"
    }
    
    private fun setupAssetsRecyclerView() {
        binding.recyclerViewAssets.layoutManager = LinearLayoutManager(this)
    }
    
    private fun updateUI() {
        val player = currentGameState?.player ?: return
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å –∏–≥—Ä–æ–∫–∞
        if (!player.isAlive()) {
            showDeathDialog()
            return
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∏ —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        updateCurrentDate(player)
        updateMonthProgressBar(player.currentDayOfMonth) // <-- —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        updateGameStatus(player)
        updatePlayerAvatar(player)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        binding.tvProfession.text = "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${player.profession.name}"
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        binding.tvCash.text = "–ù–∞–ª–∏—á–Ω—ã–µ: ${currencyFormat.format(player.cash)}"
        binding.tvSalary.text = "–ó–∞—Ä–ø–ª–∞—Ç–∞: ${currencyFormat.format(player.salary)}"
        binding.tvPassiveIncome.text = "–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: ${currencyFormat.format(player.passiveIncome)}"
        binding.tvExpenses.text = "–†–∞—Å—Ö–æ–¥—ã: ${currencyFormat.format(player.totalExpenses)}"
        binding.tvCashFlow.text = "–î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫: ${currencyFormat.format(player.getCashFlow())}"
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
        val ageColor = when {
            player.isInCriticalAge() -> "üî¥" // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑—Ä–∞—Å—Ç
            player.getYearsLeft() <= 10 -> "üü°" // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            else -> "üü¢" // –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
        }
        
        binding.tvAge.text = "$ageColor –í–æ–∑—Ä–∞—Å—Ç: ${player.age} –ª–µ—Ç (–æ—Å—Ç–∞–ª–æ—Å—å: ${player.getYearsLeft()})"
        binding.tvHealthStatus.text = player.getHealthStatus()
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        updateGameTrackVisualization(player)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏
        player.lastRiskActivated?.let { risk ->
            showMessage("‚ö†Ô∏è –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –†–ò–°–ö!\n\n${risk.icon} ${risk.name}\n\n${risk.description}\n\n–≠—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è.")
            player.lastRiskActivated = null // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        }
        
        // –ò–∑–º–µ–Ω—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–∫–∞
        if (player.isInFastTrack) {
            binding.tvTrackInfo.text = "üèéÔ∏è –ú—á–∏—Ç–µ—Å—å –∫ –º–µ—á—Ç–µ –Ω–∞ —Ä–æ—Å–∫–æ—à–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ!"
            
            // –ú–µ–Ω—è–µ–º —Ñ–æ–Ω –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–Ω—É—é –¥–æ—Ä–æ–∂–∫—É
            try {
                binding.root.setBackgroundResource(R.drawable.bg_main_screen)
            } catch (e: Exception) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
            }
            
        } else {
            binding.tvTrackInfo.text = "üèÉ –ë–µ–≥–∏—Ç–µ –æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–æ –∑–∞—Ä–ø–ª–∞—Ç—ã"
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–æ–Ω
            try {
                binding.root.setBackgroundResource(R.drawable.bg_game_field)
            } catch (e: Exception) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤
        val adapter = AssetAdapter(player.assets) { assetIndex ->
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –∞–∫—Ç–∏–≤–∞
            AlertDialog.Builder(this)
                .setTitle("–ü—Ä–æ–¥–∞—Ç—å –∞–∫—Ç–∏–≤?")
                .setMessage("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —ç—Ç–æ—Ç –∞–∫—Ç–∏–≤?")
                .setPositiveButton("–ü—Ä–æ–¥–∞—Ç—å") { _, _ ->
                    val assetToSell = player.assets[assetIndex]
                    if (gameManager.sellAsset(assetIndex)) {
                        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂—É –∞–∫—Ç–∏–≤–∞
                        player.logIncome(
                            FinancialCategory.ASSET_SALE,
                            assetToSell.value,
                            "–ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ç–∏–≤–∞: ${assetToSell.name}"
                        )
                        updateUI()
                        showMessage("–ê–∫—Ç–∏–≤ –ø—Ä–æ–¥–∞–Ω!")
                    }
                }
                .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
                .show()
        }
        binding.recyclerViewAssets.adapter = adapter
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–π—Ç–∏ –∏–∑ –∫—Ä—ã—Å–∏–Ω—ã—Ö –±–µ–≥–æ–≤
        if (player.canEscapeRatRace() && !player.isInFastTrack) {
            showEscapeRatRaceDialog()
        }
    }
    
    private fun updateMonthProgressBar(currentDay: Int) {
        val progressBar = binding.monthProgressBar
        progressBar.removeAllViews()
        val daysInMonth = 30
        for (i in 1..daysInMonth) {
            val dayView = View(this)
            val params = LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.MATCH_PARENT, 1f)
            params.marginEnd = 2
            dayView.layoutParams = params
            dayView.setBackgroundColor(
                if (i <= currentDay) android.graphics.Color.WHITE else android.graphics.Color.LTGRAY
            )
            progressBar.addView(dayView)
        }
    }
    
    private fun showEscapeRatRaceDialog() {
        val player = currentGameState?.player ?: return
        
        AlertDialog.Builder(this)
            .setTitle("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!")
            .setMessage("–í–∞—à –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –ø—Ä–µ–≤—ã—Å–∏–ª —Ä–∞—Å—Ö–æ–¥—ã!\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∫—Ä—ã—Å–∏–Ω—ã—Ö –±–µ–≥–æ–≤ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–Ω—É—é –¥–æ—Ä–æ–∂–∫—É!\n\nüéØ –ù–∞ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–æ—Ä–æ–∂–∫–µ:\n‚Ä¢ –í–∞—à–∞ —Ü–µ–ª—å: ${player.dream.name}\n‚Ä¢ –ù—É–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å: ${player.dream.fastTrackNumber}\n‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—á—Ç—ã: ${currencyFormat.format(player.dream.cost)}\n‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ –∫–∞–∂–¥—ã–π —Ö–æ–¥")
            .setPositiveButton("üöÄ –ü–µ—Ä–µ–π—Ç–∏") { _, _ ->
                currentGameState?.player?.isInFastTrack = true
                updateUI()
                showFastTrackWelcome()
            }
            .setNegativeButton("–û—Å—Ç–∞—Ç—å—Å—è", null)
            .show()
    }
    
    private fun showFastTrackWelcome() {
        val player = currentGameState?.player ?: return
        
        AlertDialog.Builder(this)
            .setTitle("üéØ –°–∫–æ—Ä–æ—Å—Ç–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞!")
            .setMessage("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–Ω—É—é –¥–æ—Ä–æ–∂–∫—É!\n\nüé≤ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n‚Ä¢ –ë—Ä–æ—Å–∞–π—Ç–µ –∫—É–±–∏–∫ –∫–∞–∂–¥—ã–π —Ö–æ–¥\n‚Ä¢ –ù—É–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å ${player.dream.fastTrackNumber} –¥–ª—è –≤–∞—à–µ–π –º–µ—á—Ç—ã\n‚Ä¢ –ü—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –º–µ—á—Ç—É –µ—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥\n‚Ä¢ –ö–∞–∂–¥—ã–π —Ö–æ–¥ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫\n‚Ä¢ –ü—Ä–∏ 1 –∏–ª–∏ 6 –≤–æ–∑–º–æ–∂–Ω—ã –±–æ–Ω—É—Å—ã!\n\nüí∞ –í–∞—à–∏ –¥–µ–Ω—å–≥–∏: ${currencyFormat.format(player.cash)}\nüéØ –ù—É–∂–Ω–æ –¥–ª—è –º–µ—á—Ç—ã: ${currencyFormat.format(player.dream.cost)}")
            .setPositiveButton("üéÆ –ò–≥—Ä–∞—Ç—å!", null)
            .show()
    }
    
    private fun showDeathDialog() {
        val player = currentGameState?.player ?: return
        
        val finalStats = """
            ‚ö∞Ô∏è –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê ‚ö∞Ô∏è
            
            üë¥ –í–æ–∑—Ä–∞—Å—Ç —Å–º–µ—Ä—Ç–∏: ${player.age} –ª–µ—Ç
            üéÆ –ò–≥—Ä–∞ –¥–ª–∏–ª–∞—Å—å: ${player.monthsPlayed} –º–µ—Å—è—Ü–µ–≤ (${player.monthsPlayed / 12} –ª–µ—Ç)
            
            üí∞ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
            üíµ –ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${currencyFormat.format(player.cash)}
            üìä –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: ${currencyFormat.format(player.passiveIncome)}
            üè† –ê–∫—Ç–∏–≤–æ–≤: ${player.assets.size}
            üíº –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: ${player.investments.size}
            üí≥ –ß–∏—Å—Ç–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${currencyFormat.format(player.getNetWorth())}
            
            ${if (player.isInFastTrack) "üéØ –î–æ—Å—Ç–∏–≥–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–æ—Ä–æ–∂–∫–∏!" else "üíº –û—Å—Ç–∞–ª–∏—Å—å –≤ –∫—Ä—ã—Å–∏–Ω—ã—Ö –±–µ–≥–∞—Ö"}
            
            üí° –ü–æ–º–Ω–∏—Ç–µ: –∂–∏–∑–Ω—å –∫–æ—Ä–æ—Ç–∫–∞, –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –º—É–¥—Ä–æ!
        """.trimIndent()
        
        AlertDialog.Builder(this)
            .setTitle("üíÄ –ö–æ–Ω–µ—Ü –∂–∏–∑–Ω–∏")
            .setMessage(finalStats)
            .setPositiveButton("üîÑ –ù–æ–≤–∞—è –∂–∏–∑–Ω—å") { _, _ ->
                finish() // –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
            }
            .setCancelable(false)
            .show()
    }
    
    private fun showFinancialJournal() {
        val player = currentGameState?.player ?: return
        val entries = player.getRecentJournalEntries(100) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
        
        if (entries.isEmpty()) {
            showMessage("üìã –ñ—É—Ä–Ω–∞–ª —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ø—É—Å—Ç")
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å RecyclerView
        val dialogView = layoutInflater.inflate(R.layout.dialog_financial_journal, null)
        val recyclerView = dialogView.findViewById<androidx.recyclerview.widget.RecyclerView>(R.id.recyclerViewJournal)
        val tvStats = dialogView.findViewById<android.widget.TextView>(R.id.tvJournalStats)
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RecyclerView
        recyclerView.layoutManager = androidx.recyclerview.widget.LinearLayoutManager(this)
        recyclerView.adapter = com.financialsuccess.game.adapters.FinancialJournalAdapter(entries)
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        val totalIncome = entries.filter { it.amount > 0 }.sumOf { it.amount }
        val totalExpenses = entries.filter { it.amount < 0 }.sumOf { kotlin.math.abs(it.amount) }
        val balance = totalIncome - totalExpenses
        
        tvStats.text = """
            üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ${entries.size} –æ–ø–µ—Ä–∞—Ü–∏–π):
            
            ‚ûï –û–±—â–∏–µ –¥–æ—Ö–æ–¥—ã: ${currencyFormat.format(totalIncome)}
            ‚ûñ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${currencyFormat.format(totalExpenses)}
            üí∞ –ß–∏—Å—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${currencyFormat.format(balance)}
            
            üìà –ó–∞–ø–∏—Å–µ–π –≤ –∂—É—Ä–Ω–∞–ª–µ: ${player.financialJournal.size}
        """.trimIndent()
        
        AlertDialog.Builder(this)
            .setTitle("üìä –ñ—É—Ä–Ω–∞–ª —Ñ–∏–Ω–∞–Ω—Å–æ–≤")
            .setView(dialogView)
            .setPositiveButton("–ó–∞–∫—Ä—ã—Ç—å", null)
            .setNeutralButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞") { _, _ ->
                showJournalAnalytics()
            }
            .show()
    }
    
    private fun showJournalAnalytics() {
        val player = currentGameState?.player ?: return
        val stats = player.getCategoryStats()
        
        val analyticsText = buildString {
            append("üìà –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:\n\n")
            
            append("üí∞ –î–û–•–û–î–´:\n")
            stats.filter { it.value > 0 }.toList()
                .sortedByDescending { it.second }
                .forEach { (category, amount) ->
                    append("${category.getIcon()} ${category.getDisplayName()}: ${currencyFormat.format(amount)}\n")
                }
            
            append("\nüí∏ –†–ê–°–•–û–î–´:\n")
            stats.filter { it.value < 0 }.toList()
                .sortedBy { it.second } // –û—Ç –±–æ–ª—å—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∫ –º–µ–Ω—å—à–∏–º
                .forEach { (category, amount) ->
                    append("${category.getIcon()} ${category.getDisplayName()}: ${currencyFormat.format(kotlin.math.abs(amount))}\n")
                }
            
            val currentMonth = player.monthsPlayed
            if (currentMonth > 0) {
                val (monthIncome, monthExpense) = player.getMonthlyStats(currentMonth)
                append("\nüìÖ –¢–ï–ö–£–©–ò–ô –ú–ï–°–Ø–¶ (${currentMonth}):\n")
                append("‚ûï –î–æ—Ö–æ–¥—ã: ${currencyFormat.format(monthIncome)}\n")
                append("‚ûñ –†–∞—Å—Ö–æ–¥—ã: ${currencyFormat.format(monthExpense)}\n")
                append("üí∞ –ë–∞–ª–∞–Ω—Å: ${currencyFormat.format(monthIncome - monthExpense)}\n")
            }
        }
        
        AlertDialog.Builder(this)
            .setTitle("üìà –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
            .setMessage(analyticsText)
            .setPositiveButton("OK", null)
            .show()
    }
    
    private fun showHealthStatus() {
        val player = currentGameState?.player ?: return
        
        val healthInfo = buildString {
            append("üè• –°–û–°–¢–û–Ø–ù–ò–ï –ó–î–û–†–û–í–¨–Ø:\n\n")
            append("üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${player.getHealthStatus()}\n\n")
            
            if (player.activeRisks.isNotEmpty()) {
                append("‚ö†Ô∏è –ê–ö–¢–ò–í–ù–´–ï –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –†–ò–°–ö–ò:\n")
                player.activeRisks.forEach { risk ->
                    append("${risk.icon} ${risk.name}\n")
                    append("   ${risk.description}\n")
                    risk.effects.forEach { effect ->
                        append("   üí∞ –†–∞—Å—Ö–æ–¥—ã: +${currencyFormat.format(effect.expenseIncrease)}\n")
                        if (effect.salaryReduction > 0) {
                            append("   üíº –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã: -${currencyFormat.format(effect.salaryReduction)}\n")
                        }
                        if (effect.recoveryTime > 0) {
                            append("   ‚è∞ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: ${effect.recoveryTime} –º–µ—Å.\n")
                        }
                        if (effect.careerEnd) {
                            append("   üö´ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–∞—Ä—å–µ—Ä—ã\n")
                        }
                    }
                    append("\n")
                }
            } else {
                append("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤\n\n")
            }
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∏—Å–∫–∞—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
            val professionRisks = ProfessionalRisks.getRisksForProfession(player.profession.name)
            if (professionRisks.isNotEmpty()) {
                append("‚ö†Ô∏è –í–û–ó–ú–û–ñ–ù–´–ï –†–ò–°–ö–ò –ü–†–û–§–ï–°–°–ò–ò:\n")
                professionRisks.forEach { risk ->
                    val isActive = player.activeRisks.any { it.name == risk.name }
                    val ageMatch = player.age in risk.ageRange
                    
                    append("${risk.icon} ${risk.name}")
                    when {
                        isActive -> append(" (–ê–ö–¢–ò–í–ï–ù)")
                        !ageMatch -> append(" (–≤–æ–∑—Ä–∞—Å—Ç ${risk.ageRange.first}-${risk.ageRange.last})")
                        else -> append(" (—Ä–∏—Å–∫ ${(risk.probability * 100).toInt()}%)")
                    }
                    append("\n")
                }
            }
        }
        
        AlertDialog.Builder(this)
            .setTitle("üè• –ó–¥–æ—Ä–æ–≤—å–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏")
            .setMessage(healthInfo)
            .setPositiveButton("OK", null)
            .setNeutralButton("üíä –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞") { _, _ ->
                showHealthcareOptions()
            }
            .show()
    }
    
    private fun showHealthcareOptions() {
        val player = currentGameState?.player ?: return
        
        val options = arrayOf(
            "üíä –ú–µ–¥–æ—Å–º–æ—Ç—Ä (5,000‚ÇΩ) - –°–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫–∏ –Ω–∞ 20%",
            "üèÉ –°–ø–æ—Ä—Ç –∏ –¥–∏–µ—Ç–∞ (3,000‚ÇΩ) - –£–ª—É—á—à–∞–µ—Ç –æ–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ", 
            "üßò –ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏—è (8,000‚ÇΩ) - –°–Ω–∏–∂–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å –∏ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ",
            "üè• –ü–æ–ª–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (15,000‚ÇΩ) - –í—ã—è–≤–ª—è–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
        )
        
        AlertDialog.Builder(this)
            .setTitle("üíä –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∏ –ª–µ—á–µ–Ω–∏–µ")
            .setItems(options) { _, which ->
                when (which) {
                    0 -> buyHealthcare("–ú–µ–¥–æ—Å–º–æ—Ç—Ä", 5000, "–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –º–µ–¥–æ—Å–º–æ—Ç—Ä")
                    1 -> buyHealthcare("–°–ø–æ—Ä—Ç –∏ –¥–∏–µ—Ç–∞", 3000, "–ó–∞–Ω—è—Ç–∏—è —Å–ø–æ—Ä—Ç–æ–º –∏ –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ")
                    2 -> buyHealthcare("–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏—è", 8000, "–°–µ–∞–Ω—Å—ã –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏")
                    3 -> buyHealthcare("–ü–æ–ª–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", 15000, "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
                }
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }
    
    private fun buyHealthcare(name: String, cost: Int, description: String) {
        val player = currentGameState?.player ?: return
        
        if (player.cash >= cost) {
            player.logExpense(
                FinancialCategory.EMERGENCY,
                cost,
                "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏: $description"
            )
            
            // –ü—Ä–æ—Å—Ç–æ–π —ç—Ñ—Ñ–µ–∫—Ç - –Ω–µ–±–æ–ª—å—à–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
            if (player.riskEffects.isNotEmpty()) {
                // –£—Å–∫–æ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ 1-2 –º–µ—Å—è—Ü–∞
                val effect = player.riskEffects.random()
                if (effect.recoveryTime > 0) {
                    val newEffect = effect.copy(recoveryTime = maxOf(0, effect.recoveryTime - 2))
                    player.riskEffects.remove(effect)
                    if (newEffect.recoveryTime > 0) {
                        player.riskEffects.add(newEffect)
                    }
                }
            }
            
            updateUI()
            showMessage("‚úÖ $name –æ–ø–ª–∞—á–µ–Ω! –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —É–ª—É—á—à–∏–ª–æ—Å—å.")
        } else {
            showMessage("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—Å–ª—É–≥")
        }
    }
    
    private fun showMessage(message: String) {
        AlertDialog.Builder(this)
            .setMessage(message)
            .setPositiveButton("OK", null)
            .show()
    }
    
    // === –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ò–ù–¢–ï–†–§–ï–ô–°–ê ===
    
    private fun updateCurrentDate(player: Player) {
        val months = arrayOf("–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å")
        val startYear = 2024
        val currentMonth = player.monthsPlayed % 12
        val currentYear = startYear + player.monthsPlayed / 12
        val currentDay = player.currentDayOfMonth
        binding.tvCurrentDate.text = "$currentDay ${months[currentMonth].lowercase()} $currentYear"
    }
    
    private fun updateGameStatus(player: Player) {
        val status = if (player.isInFastTrack) {
            "üöÄ –°–∫–æ—Ä–æ—Å—Ç–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞"
        } else {
            "üêÄ –ö—Ä—ã—Å–∏–Ω—ã–µ –±–µ–≥–∞"
        }
        binding.tvGameStatus.text = status
    }
    
    private fun updatePlayerAvatar(player: Player) {
        val avatarResource = player.profession.avatarResId
        try {
            binding.ivPlayerAvatar.setImageResource(avatarResource)
        } catch (e: Exception) {
            binding.ivPlayerAvatar.setImageResource(R.drawable.player_token)
        }
    }
    
    private fun updateGameTrackVisualization(player: Player) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Ç—Ä–µ–∫–µ
        // Fix: Added proper imports for LinearLayout and ImageView
        val trackLayout = binding.llGameTrack.getChildAt(1) as LinearLayout
        val playerIcon = trackLayout.findViewById<ImageView>(R.id.iv_player_on_track)
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Ç—Ä–µ–∫–µ (–ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100)
        val progress = if (player.isInFastTrack) {
            val dreamCost = player.dream.cost
            ((player.cash.toFloat() / dreamCost.toFloat()) * 100).coerceAtMost(100f)
        } else {
            // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ (1..30)
            ((player.currentDayOfMonth.toFloat() - 1f) / 29f) * 100f
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —à–∏—Ä–∏–Ω—ã —Ç—Ä–µ–∫–∞)
        trackLayout.post {
            val trackWidth = trackLayout.width - playerIcon.width
            val newX = (trackWidth * progress / 100).toInt()
            playerIcon.translationX = newX.toFloat()
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Ç—Ä–µ–∫–µ
        val trackIconResource = when {
            player.isInFastTrack -> when {
                player.passiveIncome > 100000 -> R.drawable.ic_luxury_car  // –†–æ—Å–∫–æ—à–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
                player.passiveIncome > 50000 -> R.drawable.ic_car          // –û–±—ã—á–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
                else -> R.drawable.ic_motorcycle                           // –ú–æ—Ç–æ—Ü–∏–∫–ª
            }
            else -> R.drawable.player_token  // –¢–æ–∫–µ–Ω –∏–≥—Ä–æ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        try {
            playerIcon.setImageResource(trackIconResource)
        } catch (e: Exception) {
            playerIcon.setImageResource(R.drawable.player_token)
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
        val trackInfo = if (player.isInFastTrack) {
            val vehicleType = when {
                player.passiveIncome > 100000 -> "üèéÔ∏è –ú—á–∏—Ç–µ—Å—å –∫ –º–µ—á—Ç–µ –Ω–∞ —Ä–æ—Å–∫–æ—à–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ!"
                player.passiveIncome > 50000 -> "üöó –ï–¥–µ—Ç–µ –∫ –º–µ—á—Ç–µ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ!"
                else -> "üèçÔ∏è –õ–µ—Ç–∏—Ç–µ –∫ –º–µ—á—Ç–µ –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª–µ!"
            }
            vehicleType
        } else {
            "üèÉ –ë–µ–≥–∏—Ç–µ –æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–æ –∑–∞—Ä–ø–ª–∞—Ç—ã"
        }
        binding.tvTrackInfo.text = trackInfo
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∏—à/–º–µ—á—Ç—É
        binding.tvFinishGoal.text = if (player.isInFastTrack) {
            "üéØ\n${player.dream.name}"
        } else {
            "üîÑ\n–ö—Ä—É–≥"
        }
    }
    
    private fun showAgeStatistics() {
        val player = currentGameState?.player ?: return
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ (–ø–æ id –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏)
        val averageLifeExpectancy = when (player.profession.id) {
            "doctor" -> 78
            "engineer" -> 75
            "teacher" -> 77
            "manager" -> 73
            "mechanic" -> 72
            "lawyer" -> 76
            else -> 75
        }
        val socialGroup = when (player.profession.id) {
            "doctor" -> "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤"
            "engineer" -> "–∏–Ω–∂–µ–Ω–µ—Ä–æ–≤"
            "teacher" -> "—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"
            "manager" -> "–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"
            "mechanic" -> "–º–µ—Ö–∞–Ω–∏–∫–æ–≤"
            "lawyer" -> "—é—Ä–∏—Å—Ç–æ–≤"
            else -> "–ª—é–¥–µ–π —Å –≤–∞—à–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π"
        }
        val remainingYears = maxOf(0, averageLifeExpectancy - player.age)
        val lifeProgress = (player.age.toFloat() / averageLifeExpectancy.toFloat() * 100).toInt()
        val message = """
            üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–û–ó–†–ê–°–¢–£
            
            üë§ –í–∞—à —Ç–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç: ${player.age} –ª–µ—Ç
            üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –¥–ª—è $socialGroup: $averageLifeExpectancy –ª–µ—Ç
            
            ‚è∞ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –≤–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ: $remainingYears –ª–µ—Ç
            üìä –ü—Ä–æ–∂–∏—Ç–æ: $lifeProgress% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏
            
            üí° –ü–æ–º–Ω–∏—Ç–µ: —ç—Ç–æ —Å—Ä–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ, –≤–∞—à–∞ —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏, –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è.
            
            ${if (player.passiveIncome > player.totalExpenses) "‚úÖ –í–∞—à–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–±–æ–¥–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏!" else "‚ö†Ô∏è –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å—Ç—Ä–µ—Å—Å –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏."}
        """.trimIndent()
        AlertDialog.Builder(this)
            .setTitle("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏")
            .setMessage(message)
            .setPositiveButton("OK", null)
            .setNeutralButton("üí™ –ó–¥–æ—Ä–æ–≤—å–µ") { _, _ ->
                showHealthStatus()
            }
            .show()
    }
}